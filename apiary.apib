FORMAT: 1A
HOST: https://stratum.registercentrum.se/

# Öppna data från Stratum

## Vad är Stratum?
Stratum är en teknisk plattform för att beskriva, samla in och presentera data från [kvalitetsregister inom hälso- och sjukvård](http://www.kvalitetsregister.se/) och 
förser ett register och dess användare med en rad färdiga funktioner, bland annat en avancerad formulärapplikation och verktyg för att administrera registreringar. 

För att bygga specifika tillämpningar, till exempel rapporter och visualisering av registerdata, utvecklas programkomponenter. 
Sådana komponenter tas med fördel fram med hjälp av vårt tillägg till Chrome Devtools som vi kallar 
[SWIX](https://chrome.google.com/webstore/detail/stratum-widget-extension/lbjhgdnnkllndpjdkdpdjglkcpmimbnc?hl=sv) (Stratum Widget Extension),
vilket kan spara en komponent direkt på ett registers webbplats för att på så sätt göra ny funktionalitet tillgänglig utan fördröjning.

Datalager genereras automatiskt från registerdata, särskilt utformade för att vara underlag till statistiska analyser och annan dataleverans. 
Statistiker kan via R-skript, som exekveras av vår R-server, leverera tillbaka resultat från analyser i JSON-format.
Resultat kan på så sätt direkt brukas av utvecklare för presentation av data, eller av
extern part om det handlar om öppna data.

## Stratums API
De flesta api-anrop kräver en api-nyckel och en sådan kan fås på begäran via mejl till [oss i Stratum-gruppen](mailto:stratum@registercentrum.se). 
En del anrop kräver stark autentisering och det framgår i så fall av respektive anropsexempel genom att api-nyckel inte finns med som parameter. 
En del anrop fungerar endast med https, andra över både http och https. Vid stark autentisering används alltid https.

Vissa api:er är mer REST-orienterade än andra. Eftersom en del api:er inte är bundna till ”statiska”
strukturer (exempelvis [aggregat](#reference/statistik/fordefinierad-aggregatstatistik)), så är dessa
mer dynamiska i strukturen och URI-schemat för dessa anrop är beroende av hur ett register är konfigurerat. 
API:et för [metadata](#reference/metadata) är å andra sidan mer REST då det avspeglar resurser 
så som register, formulär, frågor och svarsalternativ, som alla är entiteter med statisk struktur.

Våra api:er kan anropas med api-nyckel och/eller så kallad inloggningskontext. En inloggningskontext fås efter stark [autentisering](#reference/autentisering)
och skickas automatiskt med vid varje anrop.
I de fall båda existerar, det vill säga api-anrop görs med api-nyckel i ett scenario där användaren är starkt autentiserad, 
är det oftast inloggningskontexten som har högre prioritet men det finns
enstaka fall då det motsatta gäller. Detta är i så fall noterat under respektive anrop.

HTTP-statuskoder som används:
|Statuskod  |Förklaring
|-          |-
|200        |OK.
|400        |Syntaktiskt eller semantiskt fel (till exempel i URI eller parametrar).
|401        |Api-nyckel eller giltig session saknas (autentiseringsproblem).
|403        |Behörighet saknas (auktoriseringsproblem).
|404        |Efterfrågad resurs finns inte.
|405        |Otillåten anropsmetod (till exempel POST där endast GET är tillåtet).
|500        |Funktionen saknas.

Använda HTTP-metoder:
|Metod  |Avser
|-      |-
|GET    |Hämta resurs.
|PUT    |Uppdatera resurs (ger fel om resurs inte finns).
|POST   |Skapa resurs (ger fel om resurs redan finns).
|DELETE |Ta bort resurs.

All retur från api-anrop är inkapslade enligt:
```
    {
        "data": {           // Returvärde från anropet.
            ...
        },
        "success": true,    // Om anropet lyckades.
        "message": null,    // Felmeddelande om anropet inte lyckades, annars null.
        "code": 0           // Felkod om anropet inte lyckades, annars noll.
    }
```

Resultat från anrop är i JSON (endast). 

## Group Ändpunkter

# Stratums api-rot [/api]

Den här resursen innehåller länkar till api:ets olika ändpunkter, som återspeglar vilken ”gren” anropet verkar inom.

## Hämta ändpunkter [GET]

+ Response 200 (application/json)

        {
            "Authentication": "/api/authentication",
            "Metadata": "/api/metadata",
            "Registrations": "/api/registrations",
            "Aggregate": "/api/aggregate",
            "Statistics": "/api/statistics",
            "Overview": "/api/overview",
            "Widgets": "/api/widgets",
            "Configurations": "/api/configurations",
            "Proxies": "/api/proxies"
        }

# Group Autentisering

En [kontext](#reference/metadata/kontext) beskriver det sammanhang som en användare kommunicerar med Stratum. 
Kontexten pekar ut en användare, en roll och en vårdenhet. 
Eftersom vårdenheter är registerspecifika pekar kontexten även ut register indirekt.
En inloggad användare är alltid knuten till en kontext. En api-nyckel pekar också ut en kontext men används enbart för att läsa öppen data.
Detta betyder att en api-nyckel är knuten till en vårdenhet även om den kan användas för generell åtkomst i de flesta sammanhang.

För att se data från kvalitetsregister krävs tvåfaktorautentisering. Inloggning kan göras med:
* __SITHS-kort__ - den rekommenderade autentiseringsmetoden för alla som arbetar inom hälso- och sjukvård i Sverige (läs mer hos [Inera](http://www.inera.se/siths)).
* __Mobilt BankID__ - erbjuds i första hand som alternativ till de som inte har möjlighet att använda SITHS-kort (läs mer hos [BankID](https://support.bankid.com/sv)).

Autentisering med ”mjuka” SITHS-certifikat eller med våra egna RC-certifikat kan också användas men är bara tillåtna för dator-dator-kommunikation då de inte är av tvåfaktortyp.

Behörigheter kan tilldelas för sidor, formulär och resurser och kan tilldelas register, vårdenheter eller användare. 
Den inbyggda behörighetshanteringen åsidosätts då en eller flera specifika behörigheter finns, och det blir då de 
specifika behörigheterna som avgör vem som kan göra vad.

_Nedanstående anrop kan endast göras över https._

## Inloggning [/api/authentication/login]

### Begär inloggning [GET]

Begär inloggning genom medskickat certifikat (SITHS eller RC).
Efter godkänd autentisering returneras även begäran om tilldelning av sessioncookie.

Vid status 400 returneras i attribut `code`:
|Kod    |Förklaring.
|-      |-
|1      |Giltigt certifikt saknas.
|3      |Konto saknas för certifikt.
|4      |Konto saknas för Mobilt BankID.
|5      |Inloggningsbar kontext saknas för konto.
|6      |Ogiltig kontext.
|9      |Autentiserad session saknas.

+ Response 200 (application/json)
    + Attributes
        + data (Context)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)
    

+ Response 400 (application/json)

### Begär inloggning och bind till konto [POST]

Genomför inloggning med medskickat SITHS-certifikat och knyter användarkonto till certifikatinformation. 
Efter godkänd autentisering returneras även begäran om tilldelning av  sessioncookie på klienten.

Vid status 400 returneras i attribut `code`:
|Kod    |Förklaring.
|-      |-
|1      |Giltigt certifikt saknas.
|5      |Konto saknas inloggningsbar kontext.
|6      |Ogiltigt konto för kontext.
|9      |Autentiserad session saknas.

Detta anrop finns även tillgängligt i GET-version via `GET /api/authentication/assign?username=<aUsername>&password=<aPassword>`. 

+ Request (application/x-www-form-urlencoded)
    + Body
    
            username=<aUsername>&password=<aPassword>
+ Response 200 (application/json)
    + Attributes
        + data (Context)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)
+ Response 400 (application/json)

## Utloggning [/api/authentication/logout]

### Begär utloggning [GET]

Genomför utloggning genom att returnera begäran om att ta bort sessioncookie på klienten.

+ Response 200 (application/json)

        null

## Sessionstid [/api/authentication/timeleft]

### Tid som återstår av session [GET]

Returnerar den tid som återstår innan aktuell session löper ut. Kan användas av en klient för att implementera utloggning på grund 
av inaktivitet. Räknaren nollställs på varje anrop till Stratum som kräver autentisering.

+ Response 200 (application/json)
    + Attributes
        + data (Context)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

## Mobilt BankID [/api/authentication/bid]

### Autentiseringsbegäran [GET /api/authentication/bid/order/{NIN}]

Initierar en begäran om autentisering via BID. Teknisk dokumentation finns hos [BankID](https://www.bankid.com/bankid_i_dina_tjanster/rp_info).

+ Parameters
    + NIN: `194103219202` (string) - Svenskt personnummer utan bindestreck och med sekel.
+ Response 200 (application/json)
    + Attributes
        + data (OrderResponse)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Statuskontroll [GET /api/authentication/bid/collect/{OrderRef}]

Hämtar aktuell status för en utestående autentiseringsbegäran. 
När returnerat status är ”COMPLETED” kommer en sessionscookie med spårningsnyckel att sättas på klienten. För att inloggningen skall fungera
optimalt är det därför nödvändigt att klienten tillåter sessionscookies. I annat fall kommer användaren att behöva logga in varje gång
sidan laddas om.

Vid status 400 returneras i attribut `code`:
|Kod    |Förklaring.
|-      |-
|-1     |Felmeddelande från BID (faultString) returneras i `message`

+ Parameters
    + OrderRef: `4f748f5b-fb02-4529-c242-ddf651f964c9` (string) - Unik orderreferens från BID.
+ Response 200 (application/json)
    + Attributes
        + data: `COMPLETE` (enum[string])
            + Members 
                + `OUTSTANDING_TRANSACTION`
                + `NO_CLIENT`
                + `STARTED`
                + `USER_SIGN`
                + `COMPLETE`
                + `USER_CANCEL`
                + `EXPIRED_TRANSACTION`
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

## Aktuell kontext [/api/authentication/context]

### Hämta [GET]

Returnerar aktuell kontext för den som begär anropet. Kan användas för att kontrollera om anroparen är starkt autentiserad.

+ Response 200 (application/json)
    + Attributes
        + data (Context)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Byt [PUT]

Genomför ett kontextbyte.

Vid status 400 returneras i attribut `code`:
|Kod    |Förklaring
|-      |-
|1      |Ogiltig kontextidentifierare
|9      |Autentiserad session saknas

+ Request (application/json)

            {
                "Context": {
                    "ContextID": 30730
                }
            }

+ Response 200 (application/json)
    + Attributes
        + data (Context)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

+ Response 400 (application/json)

# Group Metadata
Metadata i Stratum utgörs av entiteter som beskriver våra register, till exempel formulär, frågor och svarsalternativ, men även användare, roller och 
vårdenheter &mdash; själva byggstenarna i en registerbeskrivning. 

Vissa regler gäller för hur returnerade entiteter exponeras. Dessa regler är fasta och kan inte förändras genom till exempel parametrar.
En instans innehåller alltid samtliga attribut men attribut som utgör en annan entitet är realiserad enbart till första nivån. 
För en samling av entiteter är varje attribut av atomär typ realiserat men inte relaterade entiteter. 
Detta för att minska storleken och komplexiteten på resultatet.

I dagsläget tillåter vi *inte* att brukare skapar eller förändrar metadata via api-nycklar.

## Register­ [/api/metadata/registers]
`Register` är sammanhållande för registerrelaterade entiteter till exempel formulär, frågor, svar och svarsalternativ.
Endast användare med rollen Systemutvecklare kan skapa register. En tillhörande `Site`-entitet skapas automatiskt när ett register skapas.
Endast användare med rollen Koordinator kan uppdatera attribut (för det register där man är koordinator).

+ Attributes
    + Register (Register)

### Hämta [GET /api/metadata/registers/{RegisterID}?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
    + RegisterID: `100` (optional, number) - Identifierare för aktuellt register.
+ Response 200 (application/json)
    + Attributes
        + data (Register)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla [GET /api/metadata/registers?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
+ Response 200 (application/json)
    + Attributes
        + data (array[Register])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Skapa [POST /api/metadata/registers]
+ Request (application/x-www-form-urlencoded)
    + Attributes
        + RegisterName: `Testregistret` (string, required) - Namn på registret (svenska).
        + RegisterNameInEnglish: `Test register` (string) - Namn på registret (engelska).
        + ShortName: `RC` (string, required) - Registrets förkortade namn.
        + ResourceScript: `return '<p>Intressant information</p>'` (string) - Skript för att visa information överst i händelsepanelen i registreringsapplikationen (HTML kan returneras).
        + GenericScript: `{}` (string) - JSON-objekt för registerspecifika beräkningar och andra gemensamma funktioner (för både server och klient).
        + WidgetScript: `{}` (string) - JSON-objekt med stödfunktioner för programkomponenter (endast för klient).
        + IsLookupBound: `true` (boolean) - Om personnummerkontroll är ett krav eller kan kringgås.
        + IsUnderDevelopment: `false` (boolean) - Om registret är under utveckling (döljs i vissa api-anrop).
+ Response 200 (application/json)
    + Attributes
        + data (Register)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Uppdatera [PUT /api/metadata/registers/{RegisterID}]
+ Parameters
    + RegisterID: `100` (optional, number) - Identifierare för aktuellt register.
+ Request (application/x-www-form-urlencoded)
    + Attributes
        + RegisterName: `Testregistret` (string) - Namn på registret (svenska).
        + RegisterNameInEnglish: `Test register` (string) - Namn på registret (engelska).
        + ShortName: `RC` (string) - Registrets förkortade namn.
        + ResourceScript: `return '<p>Intressant information</p>'` (string) - Skript för att visa information överst i händelsepanelen i registreringsapplikationen (HTML kan returneras).
        + GenericScript: `{}` (string) - JSON-objekt för registerspecifika beräkningar och andra gemensamma funktioner (för både server och klient).
        + WidgetScript: `{}` (string) - JSON-objekt med stödfunktioner för programkomponenter (endast klient).
        + IsLookupBound: `true` (boolean) - Om personnummerkontroll är ett krav eller kan kringgås.
        + IsUnderDevelopment: `false` (boolean) - Om registret är under utveckling (döljs i vissa api-anrop).
+ Response 200 (application/json)
    + Attributes
        + data (Register)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)


## Formulär [/api/metadata/forms]

<a name="FormScope"></a>
`Form` i Stratum kan ses som en gruppering av [frågor](#reference/metadata/fraga), relevanta att ställa till ett subjekt (oftast en patient)
vid en given tidpunkt i en process (oftast en vårdprocess). 
Eftersom Stratum inte är begränsat till patienter använder vi abstraktionen [subjekt](#reference/metadata/subject), i bemärkelsen mätobjekt.
Alla registreringar i Stratum är knutna till ett formulär. Ett formulär kan antingen vara bundet till ett subjekt eller en vårdenhet. 
En subjektbunden registrering är vanligtvis en registrering som utförs av vårdpersonal om en patients behandling eller besök 
men kan också vara en att en patient själv besvarar frågor om upplevda resultat av behandlingen 
(så kallad [PROM](http://www.kvalitetsregister.se/drivaregister/patientmedverkan/patientrapporteradematt.1988.html)).

Enhetsbundna registreringar används för till exempel teknikprofiler, praxisregistreringar och liknande, där man samlar in information en vårdenhet vid en given tidpunkt.
I dessa registreringar förekommer inte personnummer eller annat som kan identifiera enskilda individer ocg därför är registreringar i dessa formulär öppna data.

`FormScope` anger formulärets användningsområde:
|Kod |Registreras av   |Förklaring
|-   |-                |-
|0   |Registrerare     |Subjektbunden registrering.
|1   |Registrerare     |Enhetsbunden registrering.
|2   |Registrerare     |Subjektbunden registrering över vårdgivargränser (”cross border”).
|3   |Patient          |Subjektbunden registrering utförd direkt av patient (”proxy reported”).
|4   |Registrerare     |Enhetsbunden registrering som delas av flera register (”cross register”).

Endast en koordinator kan ändra attribut i sitt registers formulär.

+ Attributes
    + Form (Form)

### Hämta [GET /api/metadata/forms/{FormID}?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string, optional) - API-nyckel.
    + FormID: `1001` (number, required) - Identifierare för aktuellt formulär.
+ Response 200 (application/json)
    + Attributes
        + data (Form)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla för ett register [GET /api/metadata/forms/register/{RegisterID}?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string, optional) - API-nyckel.
    + RegisterID: `100` (number, required) - Identifierare för aktuellt register.
+ Response 200 (application/json)
    + Attributes
        + data (array[Form])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Skapa [POST /api/metadata/forms]
+ Request (application/x-www-form-urlencoded)
    + Attributes
        + FormName: `TestForm` (string) - Giltig identifierare i strängform.
        + FormTitle: `Testformulär` (string, required) - Titel.
        + TableName: `x1005` (string, required) - Namn på tabell i databas.
        + FormScope: `1` (number, required) - Anger formulärets målgrupp och användningsområde (se [tabell](#FormScope)).
        + Register (object, required) - Register formuläret skall tillhöra.
            +  RegisterID: `100` (number)
        + Parent (object, optional) - Ägande formulär (saknas för rotformulär).
            + FormID: `1001` (number)
+ Response 200 (application/json)
    + Attributes
        + data (Form)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Uppdatera [PUT /api/metadata/forms/{FormID}]
+ Parameters
    + FormID: `1001` (number, required) - Identifierare för aktuellt formulär.
+ Request (application/x-www-form-urlencoded)
    + Attributes
        + FormName: `TestForm` (string) - Giltig identifierare i strängform.
        + FormTitle: `Testformulär` (string) - Titel.
        + TableName: `x1005` (string) - Namn på tabell i databas.
        + FormScope: `1` (number) - Anger formulärets målgrupp och användningsområde (se [tabell](#FormScope)).
+ Response 200 (application/json)
    + Attributes
        + data (Form)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)


## Variabel [/api/metadata/questions]
`Question`-entiteten utgör en beskrivning av en fråga/svar i ett formulär och kan också ses som en beskrivning av en registervariabel 
utifrån ett statistiskt perspektiv. Ett formulär kan innehålla ett obegränsat antal variabler men kan bara förekomma i ett formulär.
De flesta variabler motsvarar en fråga i ett formulär som besvaras av användare (registrerare eller patient). 

En registrering utgörs av en uppsättning variabelvärden, där det mesta sparas i en databastabell som tillhör registret (kallad ”x-tabell”)
men det finns också värden som sparas på andra ställen, bland annat systemgemensam information som personnummer och händelsedatum.
För varje registrering finns en tillhörande `Event`-entitet (när variabelvärden mättes), en `Subject`-entitet (vem variabelvärden mättes på)
och en `Context`-entitet (vem som registrerat variabelvärden).
Genom att hålla viss information gemensam kan 
en del generella funktioner existera i Stratum, till exempel registreringsöversikt, slagning mot folkbokföring, hantering av avlidna.

<a name="MappedTo"></a>
Attributet `MappedTo` används generellt för att beskriva värden som *inte* lagras i tillhörande x-tabell. 
Följande varianter används:

**Attribut i händelse.**
Genom att ange `EventDate` eller `IsClosed` så länkas variabeln till händelsedatum respektive klarmarkeringsflagga i 
tillhörande `Event`.

**Attribut i vårdenhet.**
Genom att ange `UnitCode` så länkas variabeln till vårdenhetskod för den vårdenhet som registrerar i 
tillhörande `Unit`-entitet.

**Etiketter och sektioner.**
Samma namn i både `ColumnName` och `MappedTo` avser ”variabel” som saknar värde och används för etiketter och sektioner.

**Registreringslänkning.**
För variabler vars värdemängd hämtas från ett annat formulär (till exempel implantatkomponenter i SHPR) så anges identifieraren 
till det formulär värden skall hämtas från.

För att beskriva regler för vilka värden variabler kan anta och eventuellt beräknas till, används attributen `ValidationScript`respektive `CalculationScript`. 
Dessa skrivs som uttryck i JavaScript. 

Exempel på valideringsskript för att endast tillåta värden mindre än 250:
```
return Current.Height < 250
```

Exempel på beräkningsskript för att förifylla variabel med dagens datun:
```
return new Date()
```
<a name="RunOnce"></a>
Beroende på attributet `RunOnce` i variabelkonfigurationen fungerar beräkningen på olika sätt. Om den är `true` kommer värdet beräknas initialt men kan ändras. 
Om den är `false` beräknas värdet både vid registrering *och* då formuläret sparas. Med sådan konfiguration kan inte värdet ändras manuellt.

`CalculationScript` kan också användas för några ytterligare syften:

**Grupperad variabel.**
Denna typ använder en värdegrupp i Stratum för att avbilda ett inmatat värde till ett annat. På så sätt kan man till exempel åstadkomma en gruppering av
diagnoser i en dignosgrupp. Om en målvariabel kallad `DiaGrp` läggs upp med beräkningsskript enligt nedan, och domän anges till
en uppräkningsdomän som är grupperad, så kommer automatiskt värden att översättas (grupperas) från `Diagnos` till `DiaGrp` då en registrering sparas. 
```
//# target=server
//# map=Diagnos
```

**Arkiverad variabel.**
Denna variant gör att en variabel inte längre syns i formulär, inte heller beräknas eller valideras på nytt, men är däremot synlig
i datalager. En arkiverad variabel kan också används i api-sammanhang som en vanlig variabel. Typiskt används detta när 
ett register bestämmer sig för att slopa en variabel officiellt men vill behålla alla befintliga värden.
```
//# target=server
//# archived
```

**Dold beräknad variabel.**
Denna typ är densamma som en vanlig beräknad variabel med den enda skillnaden att den inte syns i registreringsformulär. Däremot kommer
den ut i datalager och kan adresseras via api:er
```
//# target=server
return 42
```

+ Attributes
    + Question (Question)

### Hämta [GET /api/metadata/questions/{QuestionID}?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
    + QuestionID: `24205` (number) - Identifierare för aktuell variabel.
+ Response 200 (application/json)
    + Attributes
        + data (Question)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla för ett formulär [GET /api/metadata/questions/form/{FormID}?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string, optional) - API-nyckel.
    + FormID: `1001` (number) - Identifierare för formulär.
+ Response 200 (application/json)
    + Attributes
        + data (Question)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Skapa [POST /api/metadata/questions]
+ Request (application/x-www-form-urlencoded)
    + Attributes
        + Question (Question) - 
            Observera att följande gäller för nedanstående attribut:
            * `QuestionID` får *inte* anges.
            * Endast `FormID` behöver anges för `Form`-entitet.
            * Endast `DomainID` behöver anges för `Domain`-entitet.
+ Response 200 (application/json)
    + Attributes
        + data (Question)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Uppdatera [PUT /api/metadata/questions/{QuestionID}]
+ Parameters
    + QuestionID: `24205` (number) - Identifierare för aktuell variabel.
+ Request (application/x-www-form-urlencoded)
    + Attributes
        + Question (Question) - 
            Observera att följande gäller för nedanstående attribut:
            * `QuestionID` får *inte* anges.
            * Endast `FormID` behöver anges i `Form`-entitet.
            * `Domain` går inte att byta i dagsläget och får inte anges.
+ Response 200 (application/json)
    + Attributes
        + data (Question)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)


## Domän [/api/metadata/domains]
Entiteten `Domain` används för att beskriva utfallsrum och kan vara gemensam för alla register eller registerspecifik.
En domän kan vara uppräkningsbar eller inte. Uppräkningsbara domäner har [domänvärden](#reference/metadata/domanvarde) kopplade till sig. 
Dessa används för att ange utfallsrum med ändligt antal värden, till exempel ”höger” och ”vänster”.
De övriga domänerna har används för värdevalidering, där utfallsrummen inte är uppräkningsbara, till exempel datum och decimaltal. 
Värdet på `DomainID` avgör vilken typ den är:

|ID|Typ
|-|-
|1000&#8209;1099|Fördefinierade, systemglobala domäner, till exempel datum, heltal och vårdenheter.
|3000&#8209;3099|Uppräkningsdomäner för vårdenhetsgrupperingar, till exempel landsting och vårdnivå.
|3100&#8209;3199|Systemglobala uppräkningsdomäner, till exempel status i den gemensamma Projektdatabasen.
|3900&#8209;3999|Uppräkningsdomäner som döljs i variabelbeskrivning.
|4000&#8209;|”Normala” uppräkningsdomäner.

Se nedan under [Hämta alla gemensamma](#reference/metadata/doman/hamta-alla-gemensamma) för att hämta en lista över domäner som är gemensamma för alla register, till exempel landsting, vårdnivå och lateralitet.

Fördefinierade domäner:
|ID   |Namn|Typ|Kommentar
|-    |-|-|-
|1015 |Boolesk|bit|Kryssruta för ja/nej-svar utan validering och hantering av saknat värde. Rekommenderat är att använda fördefinierad uppräkningsdomän för Ja/Nej (4001) om detta behövs.
|1020 |Text|varchar(80)|Textfält upp till 80 tecken.
|1021 |Kommentar|varchar(max)|Textfält ”utan begräsning”. Presenteras på tre rader.
|1025 |E-postadress|varchar(80)|Textfält med [validering som e-postadress](https://regex101.com/r/Z09r2T/1). Tillåter vad Microsoft SMTP klarar av att skicka, vilket är något mer strikt sätt än [RFC822](https://www.w3.org/Protocols/rfc822/) tillåter.
|1030 |Datum|smalldatetime|Textfält med [validering som datum](https://regex101.com/r/5Gd9RF/1) enligt [ISO8601](https://sv.wikipedia.org/wiki/ISO_8601). Datum måste vara mellan 1900-01-01 och 2076-06-06. Presenteras med kalender som valbar popup.
|1033 |Tid|time(0)|Textfält med [validering som tid](https://regex101.com/r/m39ybA/1). 
|1036 |Tidsstämpel|smalldatetime|Textfält med [validering som tidsstämpel](https://regex101.com/r/0bdk1m/1). Formen är ”YYYY-MM-DD HH:MM:SS”. Datumdelen valideras som domänen Datum (se ovan). Presenteras med kalender som valbar popup.
|1038 |Årtal|smallint|Textfält med validering som årtal. Måste vara mellan 1900 och 2079.
|1040 |Heltal|int|Textfält med validering som heltal. Måste vara mellan -2147483648 och 2147483647.
|1044 |VAS|byte|Textfält med validering som VAS. Måste vara mellan 0 och 100.
|1050 |Flyttal|decimal(18,10)|Textfält med validering som decimaltal med maximalt 10 decimaler.
|1051 |Decimaltal1|decimal(9,1)|Textfält med validering som decimaltal med en decimal.
|1052 |Decimaltal2|decimal(9,2)|Textfält med validering som decimaltal med två decimaler.
|1053 |Decimaltal3|decimal(9,3)|Textfält med validering som decimaltal med tre decimaler.
|1070 |Registrering|int|Sökbar lista med registreringar från ett formulär. Metoden `setPopulator` används i kontrollskript för att ange hur värden fylls på. Attributet `MappedTo` i en `Question` sätts till aktuellt `FormID`.
|1080 |Sektion||Används för att skapa etiketter och sektioner i formulär. Kontrollskript användas för att visa, dölja, inaktivera andra frågor i ett formulär. Kan också användas för att skapa enkla etiketter (dynamiska eller statiska). Inget värde för ”variabeln” sparas.
|1090 |Vårdenhet|int|Sökbar lista med registrets vårdenheter. 
|1092 |Användare|int|Sökbar lista med registrets användare. 
|1093 |Koordinatoranvändare|int|Sökbar lista med registrets koordinatorer.

+ Attributes
    + Domain (Domain)

### Hämta [GET /api/metadata/domains/{DomainID}?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
    + DomainID: `4000` (number, required) - Unik identifierare för domän.
+ Response 200 (application/json)
    + Attributes
        + data (Domain)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla gemensamma [GET /api/metadata/domains/common?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
+ Response 200 (application/json)
    + Attributes
        + data (array[Domain])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla gemensamma som avbildning [GET /api/metadata/domains/map/common?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
+ Response 200 (application/json)
    + Attributes
        + data (array[Domain])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla för ett register [GET /api/metadata/domains/register/{RegisterID}?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
    + RegisterID: `100` (number, required) - Identifierare för ett register.
+ Response 200 (application/json)
    + Attributes
        + data (array[Domain])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla för ett register som avbildning [GET /api/metadata/domains/map/register/{RegisterID}?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
    + RegisterID: `100` (number, required) - Identifierare för ett register.
+ Response 200 (application/json)
    + Attributes
        + data (array[Domain])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Skapa [POST /api/metadata/domains]
+ Response 200 (application/json)
    + Attributes
        + data (Domain)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Uppdatera [PUT /api/metadata/domains/{DomainID}]
+ Parameters
    + DomainID: `4000` (number, required) - Unik identifierare för domän.
+ Response 200 (application/json)
    + Attributes
        + data (Domain)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)


## Domänvärde [/api/metadata/domainvalues]
För en uppräkningsdomän, det vill säga en [domän](#reference/metadata/doman) med ett utfallsrum som innehåller ett ändligt antal värden på en nominalskala, så används
enititen `DomainValue` för att beskriva dessa värden. Varje domänvärde tillhör en domän. Typiskt används dessa i ett [formulär](#reference/metadata/doman) för att 
generera en sökbar lista med fasta svarsalternativ. Ett annat användningsområde är att gruppera vårdenheter, till exempel i landsting eller efter vårdnivå.

+ Attributes
    + DomainValue (DomainValue)

### Hämta [GET /api/metadata/domainvalues/{DomainValueID}?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
    + DomainValueID: `55249` (number, required) - Unik identifierare för domänvärde.
+ Response 200 (application/json)
    + Attributes
        + data (DomainValue)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla för en domän [GET /api/metadata/domainvalues/domain/{DomainID}?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
    + DomainID: `4000` (number, required) - Unik identifierare för domän.
+ Response 200 (application/json)
    + Attributes
        + data (array[DomainValue])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Skapa [POST /api/metadata/domainvalues]
+ Response 200 (application/json)
    + Attributes
        + data (DomainValue)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Uppdatera [PUT /api/metadata/domainvalues/{DomainValueID}]
+ Parameters
    + DomainValueID: `55249` (number, required) - Unik identifierare för domänvärde.
+ Response 200 (application/json)
    + Attributes
        + data (DomainValue)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)


## Vårdenhet [/api/metadata/units]
En vårdenhet kan vara inom primär- eller slutenvård, privat eller offentlig, och identifierar en lokalisering där behandling utförs. 
Ett register avgör självt vilka vårdenheter som skall finnas och vad de skall kallas i sitt register. I en vidare bemärkelse kan också andra 
lokaliseringar vara enheter, till exempel registerorganisationer, företag, med flera.

+ Attributes
    + Unit (Unit)

### Hämta [GET /api/metadata/units/{UnitID}?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
    + UnitID: `2000` (number, required) - Unik identifierare för vårdenhet.
+ Response 200 (application/json)
    + Attributes
        + data (Unit)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla för ett register [GET /api/metadata/units/register/{RegisterID}?apikey={APIKey}]
+ Parameters
    + RegisterID: `100` (number, required) - Unik identifierare för register.
+ Response 200 (application/json)
    + Attributes
        + data (array[Unit])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla för ett register med enhetsgrupperingar [GET /api/metadata/units/bindings/{RegisterID}?apikey={APIKey}]
+ Parameters
    + RegisterID: `100` (number, required) - Unik identifierare för register.
+ Response 200 (application/json)
    + Body

            {
                data: {
                    "Solbrinkens Vårdcentral": {
                        "County": "Skåne",
                        "LevelOfCare": "Primärvård"
                    },
                    "Näsby Vårdcentral": {
                        "County": "Skåne",
                        "LevelOfCare": "Primärvård"
                    },
                    "Näsets läkargrupp": {
                        "County": "Skåne",
                        "LevelOfCare": "Primärvård"
                    },
                    "Kungshamns Vårdcentral": {
                        "County": "Västra Götaland"
                    }
                },
                success: true,
                message: null,
                code: 0
            }

### Skapa [POST /api/metadata/units?apikey={APIKey}]
+ Response 200 (application/json)
    + Attributes
        + data (Unit)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Uppdatera [PUT /api/metadata/units/{UnitID}]
+ Parameters
    + UnitID: `2000` (number, required) - Unik identifierare för vårdenhet.
+ Response 200 (application/json)
    + Attributes
        + data (Unit)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)


## Användare [/api/metadata/users/{UserID}?query={QueryString}]
Vårdpersonal som registrerar, koordinatorer, api-brukare, dataleverantörer och integratörer är alla upplagda som användare, 
även om det är [kontexten](#reference/metadata/kontext) som är den huvudsakliga entiteten som beskriver vad en användare kan göra i systemet vid ett givet tillfälle.
En användare måste ha minst en kontext men kan ha flera. 
Användare läggs upp och administreras av koordinatorer via komponenten ”Användarhanteraren” och är gemensamma för alla register i Stratum. 

+ Attributes
    + User (User)

### Hämta [GET /api/metadata/users/{UserID}]
+ Parameters
    + UserID: `90000` (optional, number) - Unik identifierare för en användare.
+ Response 200 (application/json)
    + Attributes
        + data (User)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta via namn [GET /api/metadata/users/exist/{Username}]
+ Parameters
    + Username: `rogsa` (string) - Exakt sökning på namn.
+ Response 200 (application/json)
    + Attributes
        + data (User)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta via sökning [GET /api/metadata/users?query={QueryString}]
+ Parameters
    + QueryString: `SE23 Robert` (string) - Ett eller flera ord separerade med blanktecken. Sökning görs med OCH-villkor mellan alla ord i alla attribut. Minst ett ord med minst tre tecken krävs.
+ Response 200 (application/json)
    + Attributes
        + data (array[User])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla för ett register [GET /api/metadata/users/register/{RegisterID}]
+ Parameters
    + RegisterID: `100` (number, required) - Unik identifierare för register.
+ Response 200 (application/json)
    + Attributes
        + data (array[User])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla för en vårdenhet [GET /api/metadata/users/unit/{UnitID}]
+ Parameters
    + UnitID: `2000` (number, required) - Unik identifierare för vårdenhet.
+ Response 200 (application/json)
    + Attributes
        + data (array[User])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Skapa [POST /api/metadata/users/]
+ Response 200 (application/json)
    + Attributes
        + data (User)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Uppdatera [PUT /api/metadata/users/{UserID}]
+ Parameters
    + UserID: `90000` (optional, number) - Unik identifierare för en användare.
+ Response 200 (application/json)
    + Attributes
        + data (User)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

## Kontext [/api/metadata/contexts/{ContextID}?contextid={CallerContextID}]
En kontext är den entitet som beskriver den auktoriseringsinformation, vilket i detta sammanhang betyder en användare, en roll och en vårdenhet. 
Vid varje autentiserat anrop (starkt såväl som via api-nyckel) så är det den aktuella kontexten som avgör användarens behörighet.
Det spelar alltså ingen roll om en användare har tillgång till en annan kontext som ger behörighet, det är den
kontexten som medföljer vid anrop som gäller vid auktorisering. 

Vad som är aktuell kontext avgörs med hjälp av två sessionscookies, som gör det möjligt att vara autentiserad på olika sätt 
i olika webbläsare eller flera flikar i samma webbläsare.

En inaktiverad kontext förhindrar att inloggning sker på kontexten och den kan heller inte användas för auktorisering via till exempel api-anrop.

<a name="RolesTable"></a>
Roller:
|ID |Roll             |Kategori         |Inloggning? |Syfte
|-        |-                |-                |-           |-
|903|Koordinator      |Registerpersonal |ja          |Registrera och hämta data över vårdgivargränser samt administrera register
|902|Plusregistrerare |Vårdpersonal     |ja          |Registrerare med något större befogenheter
|901|Registrerare     |Vårdpersonal     |ja          |Registrera och hämta data för vårdenheten
|101|Dataleverantör   |System           |nej         |Leverera data till Stratum, till exempel via webbtjänst eller api
|301|Integratör       |System           |nej         |Hämta registreringar tvärs över vårdgivargränser i syfte att integrera system
|201|API-brukare      |System           |nej         |Hämta öppna data
|906|Systemutvecklare |System           |nej         |Kan spara programkomponenter och skapa register

Nedan visas registreringsrelaterade egenskaper hos de olika rollerna. Beteckningen *”gränslöst”* nedan betyder *oberoende av vårdenhet*, det vill säga tvärs över vårdenhetsgränser. 
Det förvalda i Stratum är att varje kontext endast kan se och arbeta med sin egen vårdenhets registreringar.
|Roll             |Se<br>historik   |Spara<br>registrering |Ta bort<br>registrering |Ladda ned<br>registreringar
|-                |-             |-                  |-                    |-
|Koordinator      |ja, gränslöst |ja, gränslöst      |ja, gränslöst        |ja, enhetens med personnummer
|Plusregistrerare |ja, enhetens  |ja, på enheten     |nej                  |ja, enhetens med personnummer
|Registrerare     |ja, enhetens  |ja, på enheten     |nej                  |ja, enhetens *utan* personnummer
|Dataleverantör   |nej           |ja, på enheten     |nej                  |nej
|Integratör       |ja, gränslöst |nej                |nej                  |nej
|API-brukare      |nej           |nej                |nej                  |nej
|Systemutvecklare |nej           |nej                |nej                  |nej

+ Attributes
    + Context (Context)

### Hämta [GET /api/metadata/contexts/{ContextID}]
+ Parameters
    + ContextID: `20000` (optional, number) - Unik identifierare för en kontext.
+ Response 200 (application/json)
    + Attributes
        + data (Context)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla för en vårdenhet [GET /api/metadata/contexts/unit/{UnitID}]
+ Parameters
    + UnitID: `2000` (required, number) - Identifierare för vårdenhet som kontexterna skall tillhöra.
+ Response 200 (application/json)
    + Attributes
        + data (array[Context])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla för en användare [GET /api/metadata/contexts/unit/{UserID}]
+ Parameters
    + UserID: `90000` (number, required) - Identifierare för användare som kontexterna skall tillhöra.
+ Response 200 (application/json)
    + Attributes
        + data (array[Context])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta för en registrering [GET /api/metadata/contexts/registration/{EventID}]
+ Parameters
    + EventID: `10115713` (number, required) - Identifierare för registrering vars kontext skall returneras.
+ Response 200 (application/json)
    + Attributes
        + data (Context)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Skapa [POST /api/metadata/contexts]
+ Response 200 (application/json)
    + Attributes
        + data (Context)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Uppdatera [PUT /api/metadata/contexts/{ContextID}]
+ Parameters
    + ContextID: `20000` (optional, number) - Unik identifierare för en kontext.
+ Response 200 (application/json)
    + Attributes
        + data (Context)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)


## Sida [/api/metadata/pages]
Entiteten `Page` används för att visa ett HTML-innehåll och för att skapa navigation till innehållet. Eftersom vanliga sidor (numera) hanteras via [Stratums CMS-system](https://cms.registercentrum.se)
så används sidor mestadels till att agera container åt programkomponenter (se [”komponenter”](/#reference/komponenter) nedan) och till sidor i registreringsapplikationen. 

<a name="PageScope"></a>
Det finns tre olika sammanhang en sida kan visas i, och som bestäms av attributet `PageScope`:
|Kod |Sammanhang och användningsområde
|-   |-
|0   |Sidor som visas i den ”yttre” navigationen. Kan associeras med behörigheter för att endast visas för vissa målgrupper. Minst en sådan sida måste finnas, och den med lägst `PageOrder` utgör startsida.
|1   |Sidor som kan navigeras till i registreringsapplikationen. Minst en sådan sida måste finnas, och den med lägst `PageOrder` utgör startsida efter att applikationen startats. Typiskt innehåll är en registreringsöversikt (en generisk programkomponent).
|2   |Sidor som kan navigeras till efter att man sökt upp ett subjekt, under händelsepanelen. Typiskt innehåll är en programkomponent som visar subjekt-relaterat innehåll, till exempel en patientprofil.

+ Attributes
    + Page (Page)

### Hämta [GET /api/metadata/pages/{PageID}?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
    + PageID: `1001` (number) - Identifierare för aktuell webbsida.
+ Response 200 (application/json)
    + Attributes
        + data (Page)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla för webbplats [GET /api/metadata/pages/site/{SiteID}?apikey={APIKey}]
+ Parameters
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
    + SiteID: `100` (number) - Identifierare för aktuell webbplats.
+ Response 200 (application/json)
    + Attributes
        + data (array[Page])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Skapa [POST /api/metadata/pages]
+ Response 200 (application/json)
    + Attributes
        + data (Page)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Uppdatera [PUT /api/metadata/pages/{PageID}]
+ Parameters
    + PageID: `1001` (number) - Identifierare för aktuell webbsida.
+ Response 200 (application/json)
    + Attributes
        + data (Page)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)


## Subjekt [/api/metadata/subjects]
Eftersom Stratum kan hantera registreringar som inte är knutna till patienter använder vi abstraktionen ”subjekt”, i bemärkelsen mätobjekt.
I de allra flesta fall är ”subjekt” synonymt med ”patient”. Ett subjekt är unikt för ett register, vilket innebär att om en patient 
(eller annat mätobjekt) registreras i ett annat register så blir det ett nytt subjekt.

<a name="DateCorrectness"></a>
Attributet `StatusDate` (och det härledda `DateOfDeath` för avlidna) innehåller alltid kompletta datum men i undantagsfall kan statuskontroll 
via folkbokföringen returnera ett inkomplett datum. I sådana fall tilldelas saknade datumdelar enligt nedan, och `DateCorrectness` avgör vad som ersatts:
|Kod |Åtgärd vid statuskontroll
|-   |-
|0   |Datum är okänt och har ersatts med datum då kontroll gjordes.
|1   |Månad och dag är okända och har ersatts med motsvarande från datum då kontroll gjordes.
|2   |Dag är okänd och har ersatts med motsvarande från datum då kontroll gjordes.
|3   |Komplett datum.

+ Attributes
    + Subject (Subject)

### Hämta [GET /api/metadata/subjects/{SubjectID}]
+ Parameters
    + SubjectID: `7019535` (number) - Identifierare för aktuellt subjekt.
+ Response 200 (application/json)
    + Attributes
        + data (Subject)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Skapa [POST /api/metadata/subjects]
+ Response 200 (application/json)
    + Attributes
        + data (Subject)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Uppdatera [PUT /api/metadata/subjects/{SubjectID}]
+ Parameters
    + SubjectID: `7019535` (number) - Identifierare för aktuellt subjekt.
+ Response 200 (application/json)
    + Attributes
        + data (Subject)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)


## Loggrad [/api/metadata/logentries]
I Stratum loggas i första hand händelser som används för att avgöra vem som gjort vad, till exempel vem som loggat in 
och av vem och när en registrering skapades. Detta av juridiska skäl.
En del loggningar görs även i syfte att kartlägga hur systemet används, till exempel anrop till våra REST-api:n. 
<a name="LogType"></a>
Varje loggrad tillhör en typ som anges av attributet `LogTypeID`:
|Kod |Åtgärd vid statuskontroll
|-   |-
|1000|Reserved
|1001|Registration created
|1002|Registration updated
|1003|Registration deleted
|1004|Registration received
|1006|Registration delivered
|1007|Registrations delivered
|1008|Registration history delivered
|1009|Registration failure
|1010|Patient lookup performed
|1011|Patient wildcard search performed
|1012|Registration moved
|1021|Notification sent
|1031|API request served
|1041|Data layer delivered
|1052|Subject overview delivered
|1053|Subject excerpt delivered
|1101|User authenticated by credentials
|1102|User authenticated by certificate (SITHS)
|1103|User switched context
|1104|User authenticated by SAML
|1105|User authenticated by certificate (RC)
|1113|User authentication failed
|1121|User created
|1122|User updated
|1123|User deleted
|1140|SITHS certificate assigned
|1141|SITHS certificate assigment failed
|1201|Context created
|1202|Context disabled
|1203|Context enabled
|1204|Context updated
|1301|Resource created
|1302|Resource updated
|1303|Resource deleted
|1304|Resource delivered
|1401|Page created
|1402|Page updated
|1403|Page deleted
|1501|Unit created
|1502|Unit updated
|1503|Unit deleted
|1601|Register created
|1602|Register updated
|1603|Register deleted
|1701|Form created
|1702|Form updated
|1703|Form deleted
|1801|Question created
|1802|Question updated
|1803|Question deleted
|1901|Domain created
|1902|Domain updated
|1903|Domain deleted
|2011|Domain value created
|2012|Domain value updated
|2013|Domain value deleted
|2021|Site created
|2022|Site updated
|2023|Site deleted
|2031|Subject created
|2032|Subject updated
|2033|Subject deleted
|2041|Proxy created
|2042|Proxy updated
|2043|Proxy delete
|2044|Proxy URL sent by email
|2045|Proxy URL sent by postal service

+ Attributes
    + LogEntry (LogEntry)

### Hämta för en registrering [GET /api/metadata/logentries/event/{EventID}]
+ Parameters
    + EventID: `10115713` (number, required) - Identifierare för registrering vars loggrader skall returneras.
+ Response 200 (application/json)
    + Attributes
        + data (LogEntry)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)


# Group Registreringar
Registreringar i detta perspektiv är de data som sparas för ett registers räkning av en vårdenhet, 
antingen manuellt via webbgränssnitt eller automatiserat via direktöverföring från andra it-system.
Den vanligaste formen av registrering är den som görs på en patient (så kallad ”subjektbunden registrering”) 
och som fångar information vid ett specifikt tillfälle i en vårdprocess för en patient. 

Den andra formen av registrering är inte är knuten till en patient utan direkt till en vårdenhet (så kallad ”enhetsbunden registrering”). 
Dessa registreringar används typiskt till att beskriva karaktäristika hos ett registers vårdenheter 
(till exempel operationsmiljö eller utbildningsnivå hos personal). Ett annat använddningsområde är till metaregister, 
till exempel ”Kvartalen” som sammanställer Västra götalandsregionens data på aggregerad nivå från många olika kvalitetsregister. 
Ytterligare användningsområde är gemensamma, öppna databaser, till exempel ”Projektdatabasen” som används för att registrera och 
följa upp registerbaserade forskningsprojekt.

## Avgränsning till vårdenhet
Som i flera andra sammanhang i Stratum så begränsas de data som returneras till de som finns på **aktuell kontexts vårdenhet**
(”min vårdenhets data”),
vilket innebär att om anroparen är inloggad på en vårdenhet så avgränsas resultatet från api-anrop automatiskt till denna vårdenhet.
Detta ger en automatiserad datasäkerhet, då data mellan vårdgivargränser inte är tillåtet juridiskt i normalfallet. 
Det finns en del undantag. Exempelvis kan en koordinator hämta data tvärs vårdgivargränser då de juridiskt är 
registerpersonal, inte vårdpersonal. I praktiken innebär det att en registreringskedja för en och samma patient som är 
gjord av flera vårdgivare, kan en koordinator se dessa men en vanlig registrerare ser enbart de registreringar 
som är gjorta på dennes vårdenhet.

## Systemgemensamma data
Det allra flesta data för en registrering hålls i en specifik tabell för varje formulär i ett register men vissa data hålls 
i gemensamma strukturer. Länken mellan registerdata och beskrivande metadata går via `Event`-entiteten, en struktur som framför allt 
håller tre väsentliga datapunkter gemensamt, oberoende av register:

|Datapunkt    |Förklaring
|-            |-
|`SubjectKey` |Vem insamlad information avser (till exempel personnummer för en patient)
|`EventDate`  |När vårdhändelsen inträffade (till exempel datum för besök, operation, uppföljning)
|`UnitCode`   |Var vårdhändelsen inträffade (till exempel vilken vårdcentral eller sjukhus)

Fördelen med att hålla viss information systemgemensam är att programkomponenter och applikationer kan göras mer
generella och på så sätt återanvändas mellan olika register. 

När ett datalager tas fram, samkörs registerdata med systemgemensamma data 
till en enklare flatfilsstruktur, bättre lämpad för statistisk bearbetning (men suboptimal för lagring). 

## Generella funktioner [/api/registrations]
Dessa utgör huvudgrenen för att hämta, söka, spara och uppdatera registreringar, såväl subjektbundna som enhetsbundna.

<a name="Query"></a>
**Sökkriterier**

Utöver den inbyggda begränsningen att endast returnera ”min vårdenhets data”, så finns möjlighet att ytterligare filtrera via enkla sökkriterier, 
vilket läggs till via URL-parametern `query`:
```
<query> :: <queryExpression>[,<queryExpression>...]
<queryExpression> :: <nameOfVariable> {{eq|lt|gt} <simpleLiteral> | in <sequenceLiteral>}
<sequenceLiteral> :: <simpleLiteral>|<simpleLiteral>|... // ("|" avser literalt tecken)
```

Exempel på filtrering med två uttryck och OCH-villkor mellan uttrycken (notera att alla literaler överförs som strängar):
```
query=P_Diag in 1|2|3,P_Year gt 2015
```

För de som konfigurerar register används samma syntax vid anrop av funktionen `setPopulator` för att formatera och fylla en lista med svarsalternativ från en alternativ datakälla, 
till exempel implantatkomponenter till primäroperationsformuläret i Svenska höftprotesregistret.

<a name="Template"></a>
**Mallformatering**

För enhetsbundna registreringar finns möjlighet att använda enkla malluttryck för att formatera returvärden,
vilket är användbart för att populera listor i ett registreringsformulär. Ett malluttryck anges med parametern `template` till aktuell URL. 
*Observera att om malluttryck används görs inte den naturliga avgränsningen till aktuell kontexts vårdenhet.* Exempel på uttryck:
```
template={C_ArticleNumber} - {C_Description}
```
När mallformatering används konverteras returvärdet till formen:
```
[
    {
        "ValueName": ...,
        "ValueCode": ...
    },
    ...
]
```
`ValueName` står för den formaterade texten enligt mallen och `ValueCode` är registreringens identifierare (`EventID`).
Formen lämpar sig särskilt väl för att mata listfält i Stratums registreringsapplikation, för att i register A kunna välja en registrering från register B.
På så sätt kan registreringar i två olika register länkas samman.

***Notera att med api-nyckel går det *inte* att skapa eller förändra registreringar.***

### Hämta specifik registrering [GET /api/registrations/{EventID}?apikey={APIKey}]
+ Parameters
    + EventID: `10115713` (string, required) - Identifierare för aktuell registreringshändelse.
    + APIKey: `MpuYxfbtp5I=` (string) - API-nyckel (för enhetsbundna registreringar).
+ Response 200 (application/json)

        {
            "data": {
                "EventID": 10115713,
                "InsertedAt": "2013-04-02T08:48:36.57",
                "ModifiedAt": "2013-04-02T08:48:36.57",
                "ChangedDate": "2013-04-02T00:00:00",
                "ProjectType": 1,
                "ProjectStatus": 6,
                "ProjectName": "A Scandinavian experience of register collaboration: the Nordic Arthroplasty Register Association (NARA).  ",
                "LaymansDescription": null,
                "ScientificDescription": null,
                "FirstAuthor": "Havelin LI",
                "LastAuthor": "Furnes O.",
                "OtherAuthor": "Robertsson O, Fenstad AM, Overgaard S, Garellick G",
                "EthicsApproval": null,
                "EthicsBoard": null,
                "EthicsNumber": null,
                "ResearchRequest": null,
                "ResearchContract": null,
                "Merging": null,
                "MergeWith": null,
                "InCooperation": null,
                "DateOfDelivery": null,
                "DateOfSubmission": null,
                "DateOfPublication": "2011-12-01T00:00:00",
                "Magazine": "J Bone Joint Surg Am",
                "Issue": "93 Suppl 3",
                "Pages": "13-19",
                "Form": {
                    "FormID": 1082,
                    "FormName": "Project",
                    "FormTitle": "Projekt",
                    "IsSubjectBound": false,
                    "IsSingleMapped": false,
                    "IsCrossBorder": false,
                    "FormScope": 4,
                    "Sequence": 10,
                    "Parent": null
                },
                "UnitID": 2329
            },
            "success": true,
            "message": null,
            "code": 0
        }
        
### Hämta registreringar enligt sökkriterier [GET /api/registrations/form/{FormID}?query={Query}&apikey={APIKey}]
+ Parameters
    + FormID: `2224` (string, required) - Identifierare för aktuellt formulär.
    + Query: `C_StratumCode eq 215` (string) - Sökkriterier (se [förklaring](#Query)).
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel (för enhetsbundna registreringar).
+ Response 200 (application/json)

        {
            "data": [
                {
                    "EventID": 11295124,
                    "InsertedAt": "2015-09-30T13:49:23.397",
                    "ModifiedAt": "2015-09-30T13:49:23.397",
                    "UnitID": 4615,
                    "C_SubmitDate": "2015-09-30T13:49:23.397",
                    "C_ArticleNumber": "71352258",
                    "C_StratumCode": 215,
                    "C_Description": "Reflection Polyeth. UHMWPE ID 22mm x OD 58mm",
                    "C_IsHalf": false,
                    "C_IsTotal": true,
                    "C_Fixation": 1,
                    "C_Resurfacing": null
                },
                {
                    "EventID": 11295123,
                    "InsertedAt": "2015-09-30T13:49:23.393",
                    "ModifiedAt": "2015-09-30T13:49:23.393",
                    "UnitID": 4615,
                    "C_SubmitDate": "2015-09-30T13:49:23.393",
                    "C_ArticleNumber": "71352255",
                    "C_StratumCode": 215,
                    "C_Description": "Reflection Polyeth. UHMWPE ID 22mm x OD 55mm",
                    "C_IsHalf": false,
                    "C_IsTotal": true,
                    "C_Fixation": 1,
                    "C_Resurfacing": null
                }
            ],
            "success": true,
            "message": null,
            "code": 0
        }
        
### Hämta mallformaterade registreringar [GET /api/registrations/form/{FormID}?template={Template}&query={Query}&apikey={APIKey}]
+ Parameters
    + FormID: `2224` (string, required) - Identifierare för aktuellt formulär.
    + Template: `{C_ArticleNumber} - {C_Description}` (string, required) - Formateringmall (se [förklaring](#Template)).
    + Query: `C_IsHalf eq 1,C_IsTotal eq 0` (string) - Sökkriterier (se [förklaring](#Query)).
    + APIKey: `MpuYxfbtp5I=` (string) - API-nyckel (för enhetsbundna registreringar).
+ Response 200 (application/json)

        {
          "data": [
            {
              "ValueName": "110010273 - G7 OsseoTi multi hole acetabular shell 70 mm sz I",
              "ValueCode": 13489987
            }
          ],
          "success": true,
          "message": null,
          "code": 0
        }

### Hämta alla registreringar för ett formulär [GET /api/registrations/form/{FormID}?apikey={APIKey}]
+ Parameters
    + FormID: `2187` (string, required) - Identifierare för aktuellt formulär.
    + APIKey: `1YcBDBtMoKk=` (string) - API-nyckel (vid enhetsbundna registreringar).
+ Response 200 (application/json)

        {
          "data": [
            {
              "EventID": 10772386,
              "InsertedAt": "2014-12-08T16:07:37.09",
              "ModifiedAt": "2016-01-14T10:34:54.997",
              "ProjectType": 1,
              "ProjectStatus": 2,
              "ProjectName": "Revision for aseptic loosening, a comparison between highly cross-linked and conventional polyethylene. A study of 163366 patients in the Nordic Arthroplasty Register Association database",
              "LaymansDescription": "Den vanligaste orsaken till att en höftprotes behöver opereras om är så kallad icke-infektiös lossning. Protesen tappar ...",
              "ScientificDescription": "Vetenskaplig frågeställning:\nAtt i en registerstudie jämföra risk för reoperation och revision på grund av aseptisk lossning mellan höggradigt korslänkad och konventionell ...",
              "FirstAuthor": "Per-Erik Johanson",
              "LastAuthor": "Johan Kärrholm",
              "OtherAuthor": "Göran Garellick",
              "EthicsApproval": 4,
              "EthicsBoard": "Göteborg",
              "EthicsNumber": "348-13",
              "ResearchRequest": 4,
              "ResearchContract": 3,
              "Merging": 1,
              "MergeWith": null,
              "InCooperation": 1,
              "DateOfDelivery": "2014-06-27T00:00:00",
              "DateOfSubmission": null,
              "DateOfPublication": null,
              "Magazine": null,
              "Issue": null,
              "Pages": null
            }
          ],
          "success": true,
          "message": null,
          "code": 0
        }
        
### Skapa registrering [POST /api/registrations]
+ Response 200 (application/json)

        {
            "data": [
                {
                    "EventID": 11295124
                }
            ],
            "success": true,
            "message": null,
            "code": 0
        }
    

### Skapa registrering via bjudning [POST /api/registrations?token={Token}&apikey={APIKey}]
+ Parameters
    + Token: `jKR1iNHozrfoix1cVVemOLZuDI_LjP7y7AkPxKWRQZ8` (string, required) - Identifierare till bjudning.
    + APIKey: `J6b-GSKrkfk=` (string, required) - API-nyckel.
+ Response 200 (application/json)

        {
            "data": [
                {
                    "EventID": 11295124
                }
            ],
            "success": true,
            "message": null,
            "code": 0
        }

### Uppdatera registrering [PUT /api/registrations/{EventID}?apikey={APIKey}]
+ Parameters
    + EventID: `10115713` (string) - Aktuell händelseidentifierare.
    + APIKey: `J6b-GSKrkfk=` (string) - API-nyckel.
+ Response 200 (application/json)

        {
            "data": [
                {
                    "EventID": 11295124
                }
            ],
            "success": true,
            "message": null,
            "code": 0
        }
        

## Specialkollektioner [/api/overview]
Eftersom registreringar är en så central del av systemet så finns några specialiserade funktioner som 
används ofta, bland annat i registreringsapplikationen och generiska programkomponenter. Dessa är dock av 
generell karaktär och kan med fördel användas i skräddarsydda programkomponenter.

### Hämta registreringshistorik för subjekt [GET /api/overview/history/{aSubjectKey}]
Returnerar alla registreringar för ett specifikt subjekt uppdelat på formulär. 
Även en del metadata finns med i resultatet som beskriver varje formulär. 
I normalfallet så begränsas resultatet till registreringar utförda på aktuell kontexts vårdenhet. 
Om anropande kontext har rollen Koordinator *eller* om ett formulär är markerat som ”cross-border” (se <a href="#FormScope">FormScope</a>)
så kommer även registreringar från andra vårdenheter med. För ”cross-border”-registreringar inkluderas endast de variabler som är 
markerade som identifierare och denna typ av formulär får endast användas efter överrenskommelse med Västra Götalandsregionens jurist.
För koordinatorer returneras alla registreringar och alla variabler.

Denna funktion driver bland annat registreringsapplikationen.
+ Parameters
    + aSubjectKey: `19410321-9202` (string) - A subject key.
+ Response 200 (application/json)

        {
            "data": {
                "Subject": {
                    "SubjectID": 0,
                    "SubjectKey": "19410321-9202"
                },
                "History": {
                    "TestForm": {
                        "FormID": 1001,
                        "FormName": "TestForm",
                        "FormTitle": "Testformulär",
                        "Sequence": 1,
                        "ValidationScript": "return History.TestForm.Registrations.length <= 2 ? true : 'Det går endast att registrera tre formulär per patient av ' + History.TestForm.FormTitle + '.'",
                        "IsSubjectBound": true,
                        "IsSingleMapped": false,
                        "IsCrossBorder": false,
                        "ParentForm": null,
                        "Identifiers": [
                            "KlinPri",
                            "TestDat",
                            "Ja"
                        ],
                        "MappedEventDate": "TestDat",
                        "MappedUnitCode": "KlinPri",
                        "MappedIsClosed": "Klar",
                        "MappedHSAID": null,
                        "MappedPARID": null,
                        "MappedModifiedAt": null,
                        "MappedInsertedAt": null,
                        "Registrations": []
                    }
                }
            },
            "success": true,
            "message": null,
            "code": 0
        }

### Hämta vårdenhetens profilregistreringar [GET /api/overview/history]
Returnerar alla *enhetsbundna* registreringar som är utförda på aktuell kontexts vårdenhet, uppdelat på formulär. 
Även en del metadata finns med i resultatet som beskriver varje formulär. 

Denna funktion driver bland annat registreringsapplikationen.
+ Response 200 (application/json)

        {
            "data": {
                "Subject": null,
                "History": {
                    "Project": {
                        "FormID": 1082,
                        "FormName": "Project",
                        "FormTitle": "Projekt",
                        "Sequence": 10,
                        "ValidationScript": null,
                        "IsSubjectBound": false,
                        "IsSingleMapped": false,
                        "IsCrossBorder": false,
                        "ParentForm": null,
                        "Identifiers": [
                            "ProjectName"
                        ],
                        "MappedEventDate": "ChangedDate",
                        "MappedUnitCode": "Registrar",
                        "MappedIsClosed": null,
                        "MappedHSAID": null,
                        "MappedPARID": null,
                        "MappedModifiedAt": null,
                        "MappedInsertedAt": null,
                        "Registrations": []
                    }
                }
            },
            "success": true,
            "message": null,
            "code": 0
        }
        
### Hämta vårdenhetens registreringshistorik [GET /api/overview/subject]
Returnerar alla registreringar som är utförda på aktuell kontexts vårdenhet. Endast registreringar levereras tillbaka 
och likt en avbildning (”hash map”) som gör den lämplig att traversera stora mängder data snabbt när man utgår från ett
personnummer och vill ha fram alla tillhörande registreringar.

Denna funktion driver bland annat patientöversikten.
+ Response 200 (application/json)

        {
            "data": {
                "19410321-9202": {
                    "10183435": {
                        "FormName": "TestForm",
                        "FormID": 1001,
                        "EventID": 10183435,
                        "InsertedAt": "2013-09-25T16:29:20.777",
                        "ModifiedAt": "2015-04-27T08:24:26.98",
                        "TestDat": "2013-09-25T00:00:00",
                        "Ja": 1,
                        "Text": "roger@xyz.se",
                        "Boolesk": true,
                        "Kommentar": "dferewrqewwqweqeqw",
                        "Datum": null,
                        "Tid": null,
                        "Tidsstampel": null,
                        "Artal": null,
                        "Heltal": null,
                        "VASskala": 11,
                        "ClassOfVAS": 1,
                        "Flyttal": null,
                        "Diagnos": "M16.0",
                        "DiagnosisGroup": 1,
                        "Remitt": null,
                        "Decimal3": 2.2,
                        "Decimal2": 3.3,
                        "Decimal1": 7.3,
                        "Registrering": null,
                        "Klar": false,
                        "ParentEventID": null
                    },
                    "10914294": {
                        "FormName": "TestForm",
                        "FormID": 1001,
                        "EventID": 10914294,
                        "InsertedAt": "2015-02-15T11:29:01.563",
                        "ModifiedAt": "2016-03-11T13:08:01.153",
                        "TestDat": "2015-02-15T00:00:00",
                        "Ja": 0,
                        "Text": "xyzb@gmail.com",
                        "Boolesk": false,
                        "Kommentar": null,
                        "Datum": null,
                        "Tid": "10:22:00",
                        "Tidsstampel": "2015-02-15T14:31:00",
                        "Artal": null,
                        "Heltal": 112,
                        "VASskala": 23,
                        "ClassOfVAS": 1,
                        "Flyttal": 1.234568,
                        "Diagnos": "M12.2F",
                        "DiagnosisGroup": null,
                        "Remitt": 9999,
                        "Decimal3": 2.222,
                        "Decimal2": 3.33,
                        "Decimal1": 7.4,
                        "Registrering": null,
                        "Klar": true,
                        "ParentEventID": null
                    }
                },
                "19470122-2798": {
                    "10496043": {
                        "FormName": "TestForm",
                        "FormID": 1001,
                        "EventID": 10496043,
                        "InsertedAt": "2014-05-09T12:30:23.473",
                        "ModifiedAt": "2017-08-16T07:26:15.01",
                        "TestDat": "2014-05-09T00:00:00",
                        "Ja": 0,
                        "Text": "x@this_is_my_email_address__.se",
                        "Boolesk": false,
                        "Kommentar": null,
                        "Datum": null,
                        "Tid": "05:12:00",
                        "Tidsstampel": "2017-06-02T00:00:00",
                        "Artal": 2002,
                        "Heltal": 100,
                        "VASskala": 25,
                        "ClassOfVAS": 1,
                        "Flyttal": null,
                        "Diagnos": "M00.9F",
                        "DiagnosisGroup": null,
                        "Remitt": 9999,
                        "Decimal3": 2.225,
                        "Decimal2": 3.39,
                        "Decimal1": 7.5,
                        "Registrering": null,
                        "Klar": true,
                        "ParentEventID": null
                    }
                }
            },
            "success": true,
            "message": null,
            "code": 0
        }

### Hämta elektroniskt patientutdrag [GET /api/overview/excerpt/{aSubjectKey}]
Returnerar samtliga registreringar, oberoende av register för ett specifikt subjekt. I dagsläget är det endast rollen
”Patient” som har behörighet att göra anropet. Denna roll är inte implementerad ännu, så på begäran från en patient kan vi tillfälligt 
ställa om så att någon internt kan använda funktionen för en patients räkning. 

Denna funktion driver programkomponenten för e-utdrag.
+ Parameters
    + aSubjectKey: `19410321-9202` (string) - A subject key.
+ Response 200 (application/json)

        {
          "data": {
            "FEJK": {
              "Visit": [
                {
                  "EventID": 10183435,
                  "InsertedAt": "2013-09-25T16:29:20.777",
                  "ModifiedAt": "2015-04-27T08:24:26.98",
                  "F_Date": "2013-09-25T00:00:00",
                  "F_Var1": 1,
                  "F_Var2": "M16.1",
                  "F_Var3": true,
                  "F_Var4": 87,
                  "Unit": {
                    "UnitID": 2000,
                    "UnitName": "Testenheten"
                  }
                }
              ]
            },
            "BOGUS": {
              "Operation": [
                {
                  "EventID": 10496043,
                  "InsertedAt": "2013-09-26T16:29:20.777",
                  "ModifiedAt": "2015-04-28T08:24:26.98",
                  "F_Date": "2013-09-26T00:00:00",
                  "B_Var1": 7,
                  "B_Var2": 117.3,
                  "B_Var3": false,
                  "Unit": {
                    "UnitID": 2001,
                    "UnitName": "Andra testenheten"
                  }
                }
              ]
            }
          },
          "success": true,
          "message": null,
          "code": 0
        }


# Group Statistik

Det finns två api:er finns för att ta fram statistik. 
Det första är för korstabuleringar i noll, en eller två dimensioner och kan användas generiskt på ett registers alla variabler
(med noll-dimensionellt menas här aggregat med endast ett värde).
Underliggande data kommer direkt från databasen och har ingen eftersläpning. 
Dess generiska natur gör att statistik kan tas fram för nystartade register och kan användas för enkel, experimentell dataanalys
för att till exempel avgöra lämpliga kvalitetsindikatorer, eller snabbt få en överblick av registreringsgrad vid introduktion av nya variabler. 
Nackdelen är att den typ av resultat som kan tas fram är begränsad till korstabeller med deskriptiv statistik.

Det andra är för skräddarsydda resultat och tas fram via R-skript, vilket gör att mer avancerade statistiska metoder kan användas.
Underliggande data kommer från datalager som tas fram en gång per dygn, vilket medför eftersläpning på upp till ett dygn.
Detta api är betydligt mer kraftfullt men varje resultat måste programmeras fram av statistiker, så det är en längre startsträcka.

Det finns också möjlighet att hämta upp [listor av registreringar](#reference/registreringar/generella-funktioner) (beroende på behörighet) 
och ställa samman egna resultat från dessa.

## Aggregatstatistik [/api/aggregate]
> __Det här avsnittet är under uppbyggnad.__

Med aggregat menas här resultat där rådata delas in i grupper och ett värde för varje grupp beräknas genom en aggregatfunktion, 
till exempel medelvärde, summa eller antal. Gruppering kan göras på en eller två nivåer eller för alla värden (totalvärde).
Denna typ av statistik är mycket vanlig i kvalitetsregistersammanhang. 

Ett exempel på aggregat är ”medelvärde av BMI per sjukhus och kön”. Medelvärde är här aggregatfunktionen, BMI aggregerad variabel och sjukhus/kön grupperande variabler.
Resultatet utgör då en hierarki med tre nivåer - sjukhus, kön och själva BMI-värdet för gruppen (kombinationen sjukhus/kön i detta fall).
Aggregat tas alltid fram för antingen riket, landstinget eller vårdenheten. 
Utöver användning av [brytpunkt och värdelista](#Breakpoint) är inte någon annan filtrering möjlig.
Vilket landsting och vårdenhet ges av den kontext anroparen är inloggad som,
och i fallet för anonyma användare, av den vårdenhet som api-nyckeln är utgiven till.

Innan aggregatet beräknas görs en samkörning av relaterad data på så sätt att en *underliggande* registrering 
har tillgång till sin *överliggande* registrerings data. 
Detta gör att urval och uppdelning av resultatet kan göras på alla variabler i en registreringskedja.

Detta api har sina begränsningar men har också fördelarna att det som brukare är relativt lätt att förstå 
och att prestandan i normalfallet är mycket bra. Dessutom finns en mängd statistik tillgänglig omedelbart 
från det att ett register startar och de första registreringarna kommit in. 
Behövs större flexibilitet kan [skräddarsydd statistik](/#reference/statistik/skraddarsydd-statistik) användas
men då behöver skript tas fram av statistiker för varje resultat.

> Observera att för värden bundna till uppräkningsdomän så används alltid namnet på värdet istället för dess kod. 
> På så sätt blir det enklare att arbeta med begripliga texter i till exempel ett användargränsnitt utan att manuellt behöva översätta kodade värden.

Adressering av aggregat görs på formen:

```
/api/aggregate/<Register>/<Formulärnamn>/<Omfång>/<Aggregator>/<X-variabel>/<Y-variabel>
```

|Segment        |Förklaring
|-              |-
|Register       |Registrets kortnamn, till exempel ”LVR”, ”SHPR”, ”BOA”.
|Formulärnamn   |Namn på formuläret som aggregatet utgår från, till exempel ”Visit”, ”Operation”.
|Omfång         |Underlagets omfång - riket (`total`), landstinget (`county`) eller vårdenheten (`unit`).
|Aggregator     |Den variabel som skall aggregeras tillsammans med [aggregerande funktion](#Aggregator).
|X-variabel     |Första variabel att gruppera efter.
|Y-variabel     |Andra variabel att gruppera efter.

Man kan ange både X- och Y-variabel eller enbart X *eller* ingen grupperande variabel alls. 
Resultat kan ses som en matris om både X- och Y-variabel anges, som en vektor med enbart X-variabel, och som ett enskilt värde om ingen av variablerna anges (totalvärde).

<a name="Aggregator"></a>
#### Aggregator
En aggregator används dels för att specificera vad som skall beräknas, dels på vilken variabel. I vissa fall kan man även avgränsa data från underliggande variabel 
med en [brytpunkt eller värdelista](#Breakpoint). Formen för en aggregator är:
<!--
```
<aggregator> :: <aggregatingFunction>([<aggregatorExpression>])
<aggregatingFunction> :: {count|subjectcount|usercount|unitcount|transfercount|mean|sum|min|max|stdev}
<aggregatorExpression> :: <simpleVariable>|<simpleVariable>(<breakpointValue>)|<simpleVariable>(<listValue1, listValue2, ...)
<breakpointValue> :: <numerical>
<listValue> :: <integer>
```
-->
```
<AggregatorFunktion>([<Aggregatorvariabel>[({<Brytpunkt>|<ListVärde1>,<ListVärde2>,...}])])
```

|Aggregatorfunktion |Gruppvärde
|-                  |-
|count              |Antal registreringar
|share              |Andel av totala antalet
|subjectcount       |Antal subjekt (patienter)
|usercount          |Antal användare
|unitcount          |Antal vårdenheter
|transfercount      |Antal direktöverförda registreringar (registrerade i rollen Dataleverantör)
|mean               |Medelvärde
|sum                |Summa
|min                |Minsta värde
|max                |Största värde
|stdev              |Standardavvikelse

De aggregatfunktioner som räknar antal kan alla anropas utan någon variabelparameter. För övriga är det ett krav.
Då en variabel specificeras för `count`-funktionerna så avgränsas underlaget till de registreringar som har värden på aktuell variabel,
till exempel om `count` returnerar antal registreringar, innebär `count(x)` antal registreringar _där variabel x har ett värde_.

När man adresserar tidsvariabler (datum och tidsstämpel) finns en del datumfunktioner tillgängliga:

|Datumfunktion      |Förklaring
|-                  |-
|`year(x)`          |Årtal, till exempel `2017`
|`quarter(x)`       |Årtal och kvartal, till exempel `2017-Q1`
|`month(x)`         |Årtal och månad, till exempel `2017-12`
|`week(x)`          |Årtal och vecka, till exempel `2017-45`

<a name="Breakpoint"></a>
##### Brytpunkt och värdelista
För `share`- och `count`-funktioner så kan man utöver att specificera en variabel också ange en brytpunkt eller en uppräkning av värden.
I båda fallen så avgränsas underlaget till de registreringar som har värden under brytpunkten respektive inom listan av värden.
Till exempel `count(x(4.2))` avser antal registreringar där `x` ligger under (_men inte på_) värdet `4.2`.
Uttrycket `count(x(3,4,5))` avser på liknande sätt antal registreringar där `x` har värdet 3, 4 eller 5.

Som brytpunkt kan även `null` anges och betyder registreringar där variabelvärde saknas, till exempel `count(x(null))` returnerar
antal registreringar som saknar värde på `x`. Metoden kan användas för att analysera saknade värden för 
väsentliga variabler, till exempel uppdelat på vårdenhet.

<!-- http://stratum.registercentrum.se/api/aggregate/TON/TonsilSurgeryOp/total/count?apikey=bK3H9bwaG4o= -->

Nedan följer några exempel från Tonsilloperationsregistret. Notera att
om anroparen är tvåfaktorautentiserad så hämtas vårdenhet och landsting från den aktuella kontexten. 
I annat fall hämtas motsvarande från den api-nyckel som används.

I exemplen nedan används en api-nyckel som är utställd på Registercentrum Västra Götaland och kan därför ge
ett annat resultat än vad siffrorna i exemplen visar.


### Antal registreringar [GET /api/aggregate/TON/TonsilSurgeryOp/total/count?apikey=J6b-GSKrkfk=]
Total antal registreringar i Tonsilloperationsregistrets operationsformulär.
+ Response 200 (application/json)

        {
            "data": 89984,
            "success": true,
            "message": null,
            "code": 0
        }

### Antal registreringar för landstinget [GET /api/aggregate/TON/TonsilSurgeryOp/county/count?apikey=J6b-GSKrkfk=]
Antal registreringar för landstinget i Tonsilloperationsregistrets operationsformulär.
+ Response 200 (application/json)

        {
            "data": 14233,
            "success": true,
            "message": null,
            "code": 0
        }

### Antal registreringar för vårdenheten [GET /api/aggregate/TON/TonsilSurgeryOp/unit/count?apikey=J6b-GSKrkfk=]
Antal registreringar för vårdenheten i Tonsilloperationsregistrets operationsformulär.
+ Response 200 (application/json)

        {
            "data": 3576,
            "success": true,
            "message": null,
            "code": 0
        }

### Antal registreringar med vårdform ifylld [GET /api/aggregate/TON/TonsilSurgeryOp/total/count(CareForm)?apikey=J6b-GSKrkfk=]
Antal registreringar i Tonsilloperationsregistrets operationsformulär där variabeln Vårdform är ifylld (det vill säga ”saknar *inte* värde”).
+ Response 200 (application/json)

        {
            "data": 87902,
            "success": true,
            "message": null,
            "code": 0
        }

### Andel registreringar där vårdform saknas [GET /api/aggregate/TON/TonsilSurgeryOp/total/share(CareForm(null))?apikey=J6b-GSKrkfk=]
Andel (*inte* antal) registreringar i Tonsilloperationsregistrets operationsformulär där värde på variabeln Vårdform saknas.
+ Response 200 (application/json)

        {
            "data": 0.023137446657183498,
            "success": true,
            "message": null,
            "code": 0
        }


### Antal registreringar där vårdformen är slutenvård [GET /api/aggregate/TON/TonsilSurgeryOp/total/count(CareForm(2,3,4))?apikey=J6b-GSKrkfk=]
Antal registreringar i Tonsilloperationsregistrets operationsformulär där variabeln Vårdform har värdet 2, 3 eller 4 (slutenvård eller dagkirurgi konverterad till slutenvård).
+ Response 200 (application/json)

        {
            "data": 31854,
            "success": true,
            "message": null,
            "code": 0
        }

### Antal registreringar per vårdform [GET /api/aggregate/TON/TonsilSurgeryOp/total/count/CareForm?apikey=J6b-GSKrkfk=]
Antal registreringar i Tonsilloperationsregistrets operationsformulär uppdelat på vårdform. Notera att även en post inkluderas för de som saknar värde (”null”).
+ Response 200 (application/json)

        {
            "data": {
                "null": 2082,
                "Dagkirurgi": 56048,
                "Dagkirurgi konverterad till slutenvård": 569,
                "Slutenvård": 31252,
                "Slutenvård som förlängts": 33
            },
            "success": true,
            "message": null,
            "code": 0
        }
    
### Antal registreringar per operationsmetod och kön [GET /api/aggregate/TON/TonsilSurgeryOp/total/count/OpMethod/Sex?apikey=J6b-GSKrkfk=]
Antal registreringar i Tonsilloperationsregistrets operationsformulär uppdelat på kön och operationsmetod. 
+ Response 200 (application/json)

        {
            "data": {
                "null": {
                    "Kvinna": 708,
                    "Man": 703
                },
                "Tonsillektomi + abrasio EMB20": {
                    "Kvinna": 6219,
                    "Man": 7632
                },
                "Tonsillektomi EMB10": {
                    "Kvinna": 22461,
                    "Man": 15575
                },
                "Tonsillotomi + abrasio EMB15+EMB30": {
                    "Kvinna": 13288,
                    "Man": 17867
                },
                "Tonsillotomi EMB15": {
                    "Kvinna": 2684,
                    "Man": 2847
                }
            },
            "success": true,
            "message": null,
            "code": 0
        }
        
### Andel kvinnor per operationsmetod  [GET /api/aggregate/TON/TonsilSurgeryOp/total/share(Sex(2))/OpMethod?apikey=J6b-GSKrkfk=]
Andel registreringar i Tonsilloperationsregistrets operationsformulär där registrerat kön är Kvinna (2), uppdelat operationsmetod. 
+ Response 200 (application/json)

        {
            "data": {
                "null": 0.5017717930545712,
                "Tonsillektomi + abrasio EMB20": 0.44899285250162441,
                "Tonsillektomi EMB10": 0.59051950783468288,
                "Tonsillotomi + abrasio EMB15+EMB30": 0.42651259829882843,
                "Tonsillotomi EMB15": 0.48526487072862051
            },
            "success": true,
            "message": null,
            "code": 0
        }
        
### Genomsnittligt tid till blödning efter operation per operationsmetod  [GET /api/aggregate/TON/TonsilSurgery30/total/mean(BleedPostOp)/OpMethod?apikey=J6b-GSKrkfk=]
Medelvärde av variabeln `BleedPostOp` (”Hur många dagar efter operationen började det blöda?”) uppdelat på operationsmetod.
*Notera att denna fråga utgår från uppföljningsformuläret (30 dagar) men använder en variabel i tillhörande operationsformulär (`OpMethod`).*
+ Response 200 (application/json)

        {
            "data": {
                "Tonsillektomi + abrasio EMB20": 0.62985237834882446,
                "Tonsillektomi EMB10": 1.4284405350925418,
                "Tonsillotomi + abrasio EMB15+EMB30": 0.2111361441905375,
                "Tonsillotomi EMB15": 0.40361445783132532
            },
            "success": true,
            "message": null,
            "code": 0
        }
        
### Genomsnittlig ålder per huvudsaklig indikation  [GET /api/aggregate/TON/TonsilSurgeryOp/total/mean(OpAge)/MainIndication?apikey=J6b-GSKrkfk=]
Medelvärde av ålder vid operation (`OpAge`) uppdelat på huvudsaklig indikation (`MainIndication`). Median finns inte tillgänglig.
+ Response 200 (application/json)

        {
            "data": {
                "Annat": 27.997279651795431,
                "Kronisk tonsillit": 22.559285131089538,
                "Luftvägsobstruktion/snarkning/hypertrofa tonsiller": 7.6889308036539816,
                "Peritonsillit": 26.490990990990991,
                "Systemkomplikation till tonsillit": 20.554455445544555,
                "Upprepade tonsilliter": 18.3834247762056
            },
            "success": true,
            "message": null,
            "code": 0
        }


## Skräddarsydd statistik [/api/statistics]

För mer avancerad statistik än den som går att ta fram via [aggregat](#reference/statistik/fordefinierad-aggregatstatistik) 
finns stöd för exekvering av R-skript via Stratums R-server. 
Likt övriga anrop retuneras endast resultat i JSON-format, inte bilder eller 
andra typer av resurser. Detta för att få så generellt användningsområde och hög återanvändbarhet som möjligt.

Exempel på R-skript:

```R
# En funktion som heter "Run" är ett krav (kan ta parametrar).
Run <- function() { 

  # Ladda in datalager och gemensamma funktioner.
  Load("LVR/.RData")

  # Ange resultatets målgrupp (se förklaring nedan).
  Scope <<- 1

  # Själva koden för resultatet ...
  table(Map(datafinal$SmokingVisit)) 

}
```

Notera att:
- Skript måste sparas som UTF-8. Detsamma gäller även strängliteraler. Allting i textform som överförs från Stratum är redan i UTF-8, till exmpel varibel- och värdeetiketter.
- Namn på R-skript kan enbart bestå av gemener. Lämpligt är att använda den syntax som är vanligast för webbapplikationer, det vill enbart gemener med streck (minustecken) mellan ord, till exempel `number-of-registrations.R`.
- Filändelsen på ett R-skriptet skall vara `.R`, __inte__ `.r`.
- Eventuella parametrar överförs alltid som text (en följd av att de överförs från adressen till api-anropet). Det finns med andra ord ingen typhantering.

För något resultat skall levereras ut _måste_ målgrupp specificeras, vilket görs genom att tilldela den globala 
variabeln `Scope` ett värde (notera i exemplet ovan att `<<-` används, inte `<-`). `Scope` skall tilldelas ett av nedanstående värden:

|Scope      |Förklaring
|-          |-
|1          |Anonyma data, tillgängliga för alla.
|2          |Personidentifierbara data inom en vårdgivare.
|3          |Personidentifierbara data för flera vårdgivare.

> Observera att det är mycket viktigt att ansvarig statistiker tilldelar __rätt värde__ för `Scope` eftersom risk annars finns att personidentifierbar data 
visas för obehöriga användare.

R-skript har tre variabler tillgängliga, som håller information om anropande part:

__Scope.Unit__

Identifierare (UnitCode) för anropande vårdenhet. Observera att det som skickas över är _registrets kod för vårdenheten_ (UnitCode), __inte__ Stratums globalt unika identifierare för vårdenhet (UnitID). 
Kan till exempel användas för att anpassa resultat för specifika vårdenheter i ett register.

__Scope.User__

Identifierare (UnitID) för anropande användare. 
Kan till exempel användas för att avgränsa resultat till endast en användare.

__Scope.Role__

Identifierare (RoleID) med anroparens roll.
Kan till exempel användas för att leverera resultat inom eller tvärsöver vårdgivargränser beroende på roll.
Se [roller](#RolesTable) för en beskrivning.

I själva api-anropet finns också stöd för att skicka med parametrar, till exempel `/api/statistics/brimp/test?diagnos=M16.1`. 
Dessa hamnar då som argument till anropet av R-skriptet, det vill säga som `Run(diagnos="M16.1")`. 
Parametrar som överförs är versalkänsliga, till exempel om Run-funktionen i skriptet `test.R` är deklarerad som `Run(diagnos)` 
fungerar det inte att göra anrop med `/api/statistics/brimp/test?Diagnos=M16.1`.
Alla parametrar överförs som textsträngar.

Exempel på anrop:

### Antal registreringar per status rökning i LVR [GET /api/statistics/LVR/test?apikey=J6b-GSKrkfk=]
R-skript som exekveras:
```
Run <- function() {
  Load("LVR/.RData")
  Scope <<- 1
  table(Map(data$Smoking))
}
```

+ Response 200 (application/json)

        {
          "data": {
            "Aldrig varit rökare": 87222,
            "Slutat röka för >6 månader sedan": 41210,
            "Slutat röka för <6 månader sedan": 4176,
            "Röker, men inte dagligen": 2835,
            "Röker dagligen 1-9 cigaretter/dag": 16793,
            "Röker dagligen 10-19 cigaretter/dag": 9771,
            "Röker dagligen >20 cigaretter/dag": 4246
          },
          "success": true,
          "message": null,
          "code": 0
        }
        
### Antal registreringar per led och kön i BOA [GET /api/statistics/BOA/test?apikey=J6b-GSKrkfk=]
R-skript som exekveras:
```
Run <- function() {
  Load("BOA/.RData"); 
  Scope <<- 1; 
  KV(table(Map(data$FVPat_WorstJoint), Map(data$FVPat_Sex)))
}
```

+ Response 200 (application/json)

        {
          "data": [
            {
              "k": "Höft",
              "v": [
                {
                  "k": "Man",
                  "v": 7278
                },
                {
                  "k": "Kvinna",
                  "v": 15238
                }
              ]
            },
            {
              "k": "Knä",
              "v": [
                {
                  "k": "Man",
                  "v": 15239
                },
                {
                  "k": "Kvinna",
                  "v": 32680
                }
              ]
            },
            {
              "k": "Hand",
              "v": [
                {
                  "k": "Man",
                  "v": 333
                },
                {
                  "k": "Kvinna",
                  "v": 1851
                }
              ]
            },
            {
              "k": "Axel",
              "v": [
                {
                  "k": "Man",
                  "v": 16
                },
                {
                  "k": "Kvinna",
                  "v": 22
                }
              ]
            }
          ],
          "success": true,
          "message": null,
          "code": 0
        }

# Group Konfigurationer

## Basfunktioner [/api/configurations/globals]
En uppsättning funktioner av generisk karaktär i Stratum, till exempel datumkonvertering, ålders-/könsberäkning, ägarregistrering, underregistreringar. 
Dessa används ofta av beräknings- och valideringskript i bland annat Stratums registreringsapplikation och diverse [promgramkomponenter](#reference/komponenter).
Inkluderar även Stratumversion och aktuellt produktionsläge. API-nyckel behöves inte för detta anrop.

### Hämta [GET]
+ Response 200 (application/json)

        {
            "data": {
                "StratumVersion": "2.78.3708",
                "DeploymentMode": "PROD",
                "Methods": [...]
            },
            "success": true,
            "message": null,
            "code": 0
        }

## Huvudnavigation [/api/configurations/navigation/{SiteID}?apikey={APIKey}]
Navigation för ett registers webbplats. Attributet `level` anger vilken nivå i navigationen en sida förekommer.
Navigationen kan vara hierarkisk och undersdior finns i attributet `children`.
Själva sidinnehållet kan hämtas upp med `id` och anrop till metadata-api:et, se [exempel](#reference/metadata/sida/hamta).

### Hämta[GET]
+ Parameters
    + SiteID: `100` (number) - Webbplatsens identifierare.
    + APIKey: `J6b-GSKrkfk=` (optional, string) - API-nyckel.
+ Response 200 (application/json)

        {
            "data": [
                {
                    "leaf": true,
                    "id": 1001,
                    "level": 0,
                    "text": "Om Stratum",
                    "children": null
                },
                {
                    "leaf": true,
                    "id": 1097,
                    "level": 0,
                    "text": "Kontakta oss",
                    "children": null
                },
                {
                    "leaf": true,
                    "id": 1863,
                    "level": 0,
                    "text": "Registerförteckning",
                    "children": null
                },
                {
                    "leaf": false,
                    "id": 1661,
                    "level": 0,
                    "text": "Dokumentation",
                    "children": [...]
                },
                {
                    "leaf": false,
                    "id": 1856,
                    "level": 0,
                    "text": "Administration",
                    "children": [
                        {
                            "leaf": true,
                            "id": 1336,
                            "level": 1,
                            "text": "Dina resurser",
                            "children": null
                        },
                        {
                            "leaf": true,
                            "id": 2126,
                            "level": 1,
                            "text": "Registerutdrag",
                            "children": null
                        }
                    ]
                },
                {
                    "leaf": false,
                    "id": 1743,
                    "level": 0,
                    "text": "Internt",
                    "children": [...]
                }
            ],
            "success": true,
            "message": null,
            "code": 0
        }

## Applikationsnavigation [/api/configurations/navigation/scoped/{aSiteID}]
Navigation för sidor specifika för registreringsapplikationen. Se avsnittet om [sidadressering](#reference/sidadressering) för en förklaring till attributet `PageScope`.
Minst en sida med `PageScope 1` måste finnas, eftersom denna visas initialt när man startar registreringsapplikationen. Denna navigation är en flat struktur 
till skillnad från [huvudnavigationen](#reference/konfigurationer/huvudnavigation) som kan vara hierarkisk.

### Hämta[GET]
+ Parameters
    + aSiteID: `100` (number) - Webbplatsens identifierare.
+ Response 200 (application/json)

        {
            "data": [
                {
                    "PageID": 1797,
                    "PageTitle": "Vår sida",
                    "PageScope": 1
                },
                {
                    "PageID": 2057,
                    "PageTitle": "Information",
                    "PageScope": 2
                }
            ],
            "success": true,
            "message": null,
            "code": 0
        }

# Group Komponenter

## Inbäddningsbara programkomponenter [/api/widgets]
För att kunna erbjuda flexibilitet i en applikationsplattform likt Stratum behövs möjligheten att kunna skjuta in ny funktionalitet utan att behöva förändra plattformen i sig.
Våra programkomponenter, eller ”widgets” som de också kallas, ger just den möjligheten.
Komponenter kan antingen vara generiska, som kan återanvändas till flera register, eller skräddarsydda för att lösa ett registers specifika behov.
Exempel på generiska komponenter är Patientöversikten och Användarhanteraren. Dessa återanvänds mellan register och kan konfigureras för att passa varje enskilt register.

De flesta komponenter som tas fram är skräddarsydda för registerspecifika ändamål. Typexemplet är presentationer och visualiseringar av registerdata &mdash; allt från enstaka diagram till 
”dashboards” med sofistikerade användargränssnitt för att bli så tillgängliga som möjligt för registrens användare. Andra exempel är att
administration av patientlistor eller registrering av implantatkomponenter.

Programkoden bakom varje komponent finns på en [sida](/#reference/metadata/sida), och en sida kan innehålla mer än en komponent. 
På sidan läggs den in enligt nedanstående mönster. Notera att själva komponenten utgörs av JavaScriptkoden mellan `<script>`-taggarna:
```
...
<div id="{{ Namn på komponentcontainer }}"></div>
<script type="text/javascript">
    
   // JavaScriptkod som typiskt interagerar med Stratums api:er och renderar en eller flera komponenter i containern ovan.
   
//! {{ En beskrivning av komponenten som din farmor skulle begripa }}
//# sourceURL="{{ Systemunikt komponentnamn på formen <Registerförkortning>/<Komponentnamn> }}"
</script>
...
```

Även om en komponent finns på en sida så är det inget som hindrar att den används på andra sidor. 
På så sätt görs en generisk komponent, den definieras på en sida som tillhör 
Registercentrum Västra Götaland internt men länkas in från diverse andra sidor.

Vid utveckling av komponenter används lämpligen [ExtJS](https://www.sencha.com/products/extjs/#overview) eftersom detta JavaScript-ramverk används till stor del av Stratums ”front-end”
och därför oftast finns tillgängligt automatiskt. 
ExtJS är att det är ett av de få heltäckande ramverken som finns på marknaden för avancerad applikationsutveckling. 

Beroende på vilken typ av webbplats som ett register använder är ExtJS mer eller mindre förvalt. 
För de mest moderna webbplatserna, som använder [React](https://reactjs.org/), kan alternativa ramverk användas eftersom 
beroendet till ExtJS inte är inbyggt. För övriga är ExtJS oftast mest lämpligt.

Exempel på komponent som visar ett stapeldiagram över kumulativt antal registrererade skadetillfällen i Svenska Frakturregistret i Stratum per månad:
```
// Bar chart with cumulative distribution.
var linearChart = Ext.create('Ext.chart.Chart', {
    renderTo: Ext.getBody(), // <-- Byt ut mot namnet på den container där innehållet skall renderas.
    width: '100%',
    height: 300,
    insetPadding: 30,
       animation: false,
    border: false,
    style: {
        borderWidth: '1px',
        borderColor: '#ddd',
        borderStyle: 'solid',
        borderRadius: '5px',
        opacity: 0
    },
    background: '#eee',
    store: {
        autoLoad: true,
        proxy: {
            type: 'ajax',
            url: 'https://stratum.registercentrum.se/api/statistics/sfr/test?apikey=bK3H9bwaG4o=',
            reader: 'objecttoarray.cumulative' // <-- Using cumulative reader.
        },
        fields: [
            { name: 'key',    type: 'string'},
            { name: 'value',  type: 'float' } 
        ],
        listeners: {
            load: function(aStore, aList) {
                linearChart.animate({
                    duration: 500,
                    to: { opacity: 1 }
                });
            }
        }
    },
    axes: [{
        type: 'numeric',
        position: 'left',
        fields: ['value'],
        grid: {
            odd: {
                opacity: 0.5,
                fill: '#ddd'
            }
        },
        label: {
            renderer: Ext.util.Format.numberRenderer('0,0')
        }
    },{
        type: 'category',
        position: 'bottom',
        fields: ['key']
    }],
    series: [{
        type: 'bar',
        xField: 'key',
        yField: 'value',
        style: {
            fillOpacity: 0.7
        }
    }]
});
```

Denna komponent finns i en [JSFiddle](http://jsfiddle.net/medicor/Lut8ad58/).

### Hämta JavaScriptkod för en komponent [GET /api/widgets/registers/{RegisterShortName}/{SlugName}]
Returnerar JavaScriptkod för en widget. Notera att en komponent kan bäddas in med hjälp av api-anrop 
genom 
```
<script src="/api/widgets/registers/RC/NumberOfRegistrations"></script>
```
för att på så sätt kunna återanvändas på flera sidor.
+ Parameters
    + RegisterShortName: `RC` (string) - Kortnamn på register som innehåller komponenten (för generiska komponenter används ”RC”).
    + SlugName: `NumberOfRegistrations` (string) - Namnet på komponenten.
+ Response 200 (text/javascript)


        (function() {
            var container = Stratum.containers && Stratum.containers['RC/NumberOfRegistrations'] || 'sw-container1',
                chart;
        
            chart = Ext.widget('cartesian', {
                renderTo: container, 
                width: '100%',
                height: 300,
                insetPadding: 30,
                interactions: 'itemhighlight',
                animation: false,
                border: false,
                plugins: {
                    ptype: 'chartitemevents'
                },
                style: {
                    borderWidth: '1px',
                    borderColor: '#ddd',
                    borderStyle: 'solid',
                    borderRadius: '5px',
                    opacity: 0
                },
                background: '#eee',
                store: {
                    storeId: 'chartStore',
                    autoLoad: true,
                    proxy: {
                        type: 'ajax',
                        url: '/stratum/api/overview/monthly?apikey=9-ufjxVFXgc=',
                        reader: {
                            type: 'json',
                            rootProperty: 'data'
                        }
                    },
                    fields: [
                        'Year', 
                        'Month', 
                        'Count', 
                        {
                            name: 'Label',
                            type: 'string',
                            convert: function(n,m) {
                                return m.get('Year') + '-' + (m.get('Month') < 10 ? '0'+m.get('Month') : m.get('Month'));
                            }
                        }
                    ],
                    listeners: {
                        beforeload: function() {
                            spin(container, 'Hämtar senaste uppgifterna');
                        },
                        load: function() {
                            unspin();
                            chart.setAnimation(true);
                            chart.animate({
                                duration: 500,
                                from:  { opacity: 0 },
                                to:    { opacity: 1 }
                            });
                        }
                    }
                },
                axes: [{
                    type: 'numeric',
                    position: 'left',
                    renderer: Ext.util.Format.numberRenderer('0,0'),
                    grid: {
                        odd: {
                            opacity: 0.5,
                            fill: '#ddd'
                        }
                    },
                    label: {
                        rotate: {
                            degrees: 0
                        }
                    }
                }, {
                    type: 'category',
                    position: 'bottom',
                    label: {
                        rotate: {
                            degrees: 270
                        }
                    }
                }],
                series: [{
                    type: 'bar',
                    axis: 'left',
                    xField: 'Label',
                    yField: 'Count',
                    highlight: {
                        opacity: 1.0,
                        fill: '#E98300',
                        stroke: 'transparent'
                    },
                    style: {
                        opacity: 0.7,
                        fill: '#E98300',
                        stroke: 'transparent',
                        minGapWidth: 10
                    }
                }],
                listeners: {
                    itemclick: function(aSeries, anItem) {
                        anItem.record.hidden = true; // Store item visibility state in store record (is used in filter function).
                        Ext.data.StoreManager.lookup('chartStore').filterBy(function(se) {
                            return !se.hidden;
                        });
                    }
                }
            });
        })();
        //! Visar diagram över antal registreringar i Stratum per månad senaste året.
        //# sourceURL=RC/NumberOfRegistrations

### Hämta lista med beskrivning av alla komponenter [GET /api/widgets]
Returnerar en lista med kort beskrivning av varje komponent som finns i Stratum.
+ Response 200 (application/json)

        {
          "data": [
            {
              "PageID": 1836,
              "WidgetSlug": "BOA/ResearchOverview",
              "Description": "Projektdatabasen - information om planerade, pågående och publicerade projekt med utgångspunkt i register anslutna till Registercentrum Västra Götaland. Registerbaserad forskning. Vetenskapliga artiklar.\r"
            },
            {
              "PageID": 2315,
              "WidgetSlug": "HNSV/AudiologyBaseline",
              "Description": ""
            },
            {
              "PageID": 2539,
              "WidgetSlug": "KRH/ComponentsUsed",
              "Description": "SHPRs företagsmodul: volymer"
            },
            {
              "PageID": 2576,
              "WidgetSlug": "KRH/RevisionScope",
              "Description": "SHPRs företagsmodul: revisionsutfall"
            },
            {
              "PageID": 2007,
              "WidgetSlug": "LVR/TransfersPerMonth",
              "Description": "Statistik över vårdenheter med direktöverförda registreringar i LVR.\r"
            },
            {
              "PageID": 1001,
              "WidgetSlug": "RC/NumberOfRegistrations",
              "Description": "Visar diagram över antal registreringar i Stratum per månad senaste året."
            },
            {
              "PageID": 1808,
              "WidgetSlug": "RC/ProjectDatabase",
              "Description": "Projektdatabasen - information om planerade, pågående och publicerade projekt med utgångspunkt i register anslutna till Registercentrum Västra Götaland. Registerbaserad forskning. Vetenskapliga artiklar."
            },
            {
              "PageID": 1728,
              "WidgetSlug": "RC/SubjectOverview",
              "Description": "Generisk registreringsöversikt som i listform visar ett fast antal filtrerbara och sorterbara värden från samtliga registreringar på aktuell vårdenhet"
            }
          ],
          "success": true,
          "message": null,
          "code": 0
        }
        
        
# Group Bjudningar

## PROM-inbjudningar till patient [/api/proxies]

I Stratum finns diverse stöd för att hantera [patientrapporterade mått](http://rcso.se/patientmedverkan/prom/),
eller PROM som det brukar kallas (efter ”Patient Reported Outcome Measures”). 
PROM används flitigt av kvalitetsregister
för att belysa patientens egen uppfattning om sin hälsa, till exempel före och efter en behandling.
Detta mäter hälsoförändring utifrån patientens eget perpektiv. 
När denna förändring relateras till kliniska faktorer i behandlingen kan det vara vägledande i rekommendation av 
olika metoder, läkemedel eller material som bör används före, under och efter behandlingen.

PROM kan vara både planerat, ofta efter någon typ av ingrepp eller besök, eller göras spontant vid besök 
på en mottagning eller vårdcentral. För att veta vilka patienter som är föremål för PROM-enkät används något vi kallar bjudningar.
En bjudning håller information om vilken patient som skall bjudas, vilken uppsättning frågor registret vill få besvarade, 
svarsstatus och eventuellt vilken registrering som initierat bjudningen.

En av funktionerna i Stratum är att automatiskt generera bjudningar utifrån registerspecifika kriterier,
till exempel 1-årsuppföljning efter höftprotesoperation eller 30-dagarsuppföljning efter tonsilloperation.
Vilka faktorer som skall trigga en bjudning konfigureras efter registrets behov. 
Systemet tar också automatiskt bort bjudningar där svar inte inkommit efter viss tid eller då patienten avlidit.

I de flesta fall så görs bjudningar elektroniskt, det vill säga skickas ut via e-post. Stratum har ingen inbyggd hantering
av e-postadresser så det är upp till registret att lagra dessa själva. Ofta gör det vid första PROM (som då hanteras manuellt) 
eller vid initial registrering efter besök eller operation.

Den andra formen av bjudningar är manuell vilket innebär att en patient som kommer till en mottagning kan bjudas PROM-enkät direkt 
på plats via dator eller mobil enhet. Manuella bjudningar kan också göras av vårdpersonal som senare skickar ut dessa via 
vanlig post.

Oavsett bjudningssätt kan PROM besvaras antingen via den så kallade [PROM-applikationen](http://stratum.registercentrum.se/apps/publicregistrator/app.html) 
av patienten själv, eller registreras som vanliga formulär via Stratums registreringsapplikation av vårdpersonal. 
Det senare är ofta fallet om PROM besvaras via pappersformulär.

<a name="ReplyStatus"></a>
Tabellen nedan visar de statusvärden en bjudning kan anta (domän 3101 - ”ReplyStatus”):

|Värde  |Betydelse
|-      |-
|0      |Upplagd
|1      |Skickad elektroniskt
|2      |Skickad via post
|6      |1:a påminnelse upplagd
|7      |2:a påminnelse upplagd
|11     |1:a påminnelse skickad
|12     |2:a påminnelse skickad
|99     |Utgår
|100    |Besvarad
|110    |Avbruten (manuellt)
|111    |Avbruten (automatiskt)

### Hämta [GET /api/proxies/{ProxyID}]
+ Parameters
    + ProxyID: `123456` (number) - Identifierare för aktuell bjudning.
+ Response 200 (application/json)
    + Attributes
        + data (Proxy)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta alla på vårdenehten [GET /api/proxies]
+ Response 200 (application/json)
    + Attributes
        + data (array[Proxy])
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Hämta enkätunderlag via token [GET /api/proxies/survey?token={Token}&apikey={APIKey}]
+ Parameters
    + Token: `jKR1iNHozrfoix1cVVemOLZuDI_LjP7y7AkPxKWRQZ8` (string) - Krypterad identifierare till aktuell bjudning.
    + APIKey: `J6b-GSKrkfk=` (optional, string) - API-nyckel.
+ Response 200 (application/json)

        {
          "data": {
            "Form": {
              "FormID": 1008,
              "FormName": "ThreeMonthsPatient",
              "FormTitle": "Uppföljning 3 mån – patient",
              "HelpNote": null,
              "ValidationScript": null,
              "Register": {
                "RegisterID": 104,
                "RegisterName": "BOA-registret",
                "RegisterNameInEnglish": "The BOA Register",
                "ShortName": "BOA",
                "IsLookupBound": true,
                "IsSubjectBound": true,
                "IsUnderDevelopment": false,
                "Site": {
                  "SiteID": 204,
                  "SiteName": "BOA-registret",
                  "ThemeSettings": "{BaseColor:\"#18B3EC\",HeaderLogo:30230,HeaderTile:30225,BodyTile:30227,Skin:\"Light\"}",
                  "Language": "sv",
                  "Country": "SE",
                  "StartPage": {
                    "PageID": 1148,
                    "PageTitle": "Registret flyttat",
                    "PageLevel": 0,
                    "PageOrder": 4,
                    "PageScope": 0,
                    "ModifiedAt": "2017-02-22T10:02:13.48"
                  },
                  "FirstPage": {
                    "PageID": 1557,
                    "PageTitle": "Översikt",
                    "PageLevel": 0,
                    "PageOrder": 20,
                    "PageScope": 1,
                    "ModifiedAt": "2017-03-07T11:31:42.337"
                  }
                }
              },
              "Questions": [
                {
                  "QuestionID": 22679,
                  "ColumnName": "M3Pat_Date",
                  "MappedTo": "EventDate",
                  "PrefixText": "Datum för uppföljning",
                  "SuffixText": null,
                  "RunOnce": false,
                  "Sequence": 20,
                  "Position": 0,
                  "Span": 6,
                  "IsMandatory": true,
                  "IsIdentifier": true,
                  "DataType": "smalldatetime",
                  "Level": 3,
                  "HelpNote": null,
                  "CalculationScript": null,
                  "ValidationScript": null,
                  "ControlScript": null,
                  "Domain": {
                    "DomainID": 1030,
                    "DomainName": "Date",
                    "DomainTitle": "Datum",
                    "IsInteger": false,
                    "IsEnumerated": false
                  },
                  "Form": "{...}"
                },
                {
                  "QuestionID": 116511,
                  "ColumnName": "M3Pat_Foot",
                  "MappedTo": null,
                  "PrefixText": "Fot",
                  "SuffixText": null,
                  "RunOnce": false,
                  "Sequence": 80,
                  "Position": 16,
                  "Span": 5,
                  "IsMandatory": false,
                  "IsIdentifier": false,
                  "DataType": "int",
                  "Level": 1,
                  "HelpNote": null,
                  "CalculationScript": null,
                  "ValidationScript": null,
                  "ControlScript": null,
                  "Domain": {
                    "DomainID": 4028,
                    "DomainName": "Sida",
                    "DomainTitle": "Sida",
                    "IsInteger": true,
                    "IsEnumerated": true
                  },
                  "Form": "{...}"
                }
              ]
            },
            "Unit": "{...}",
            "Methods": "{...}",
            "Initials": {
              "M3Pat_StillPain": 1
            },
            "IsOngoing": false,
            "ReplyStatus": 110,
            "StatusDate": "2017-05-16T08:57:52"
          },
          "success": true,
          "message": null,
          "code": 0
        }
        
### Hämta enkätunderlag via personnummer och PIN [GET /api/proxies/survey?subject={SubjectKey}&pin={PIN}&apikey={APIKey}]
+ Parameters
    + SubjectKey: `19620831-5116` (string) - Personnummer vars enkätunderlag skall hämtas upp.
    + PIN: `7321` (number) - PIN-kod till bjudning.
    + APIKey: `J6b-GSKrkfk=` (optional, string) - API-nyckel.
+ Response 200 (application/json)

        {
          "data": {
            "Form": {
              "FormID": 1008,
              "FormName": "ThreeMonthsPatient",
              "FormTitle": "Uppföljning 3 mån – patient",
              "HelpNote": null,
              "ValidationScript": null,
              "Register": {
                "RegisterID": 104,
                "RegisterName": "BOA-registret",
                "RegisterNameInEnglish": "The BOA Register",
                "ShortName": "BOA",
                "IsLookupBound": true,
                "IsSubjectBound": true,
                "IsUnderDevelopment": false,
                "Site": {
                  "SiteID": 204,
                  "SiteName": "BOA-registret",
                  "ThemeSettings": "{BaseColor:\"#18B3EC\",HeaderLogo:30230,HeaderTile:30225,BodyTile:30227,Skin:\"Light\"}",
                  "Language": "sv",
                  "Country": "SE",
                  "StartPage": {
                    "PageID": 1148,
                    "PageTitle": "Registret flyttat",
                    "PageLevel": 0,
                    "PageOrder": 4,
                    "PageScope": 0,
                    "ModifiedAt": "2017-02-22T10:02:13.48"
                  },
                  "FirstPage": {
                    "PageID": 1557,
                    "PageTitle": "Översikt",
                    "PageLevel": 0,
                    "PageOrder": 20,
                    "PageScope": 1,
                    "ModifiedAt": "2017-03-07T11:31:42.337"
                  }
                }
              },
              "Questions": [
                {
                  "QuestionID": 22679,
                  "ColumnName": "M3Pat_Date",
                  "MappedTo": "EventDate",
                  "PrefixText": "Datum för uppföljning",
                  "SuffixText": null,
                  "RunOnce": false,
                  "Sequence": 20,
                  "Position": 0,
                  "Span": 6,
                  "IsMandatory": true,
                  "IsIdentifier": true,
                  "DataType": "smalldatetime",
                  "Level": 3,
                  "HelpNote": null,
                  "CalculationScript": null,
                  "ValidationScript": null,
                  "ControlScript": null,
                  "Domain": {
                    "DomainID": 1030,
                    "DomainName": "Date",
                    "DomainTitle": "Datum",
                    "IsInteger": false,
                    "IsEnumerated": false
                  },
                  "Form": "{...}"
                },
                {
                  "QuestionID": 116511,
                  "ColumnName": "M3Pat_Foot",
                  "MappedTo": null,
                  "PrefixText": "Fot",
                  "SuffixText": null,
                  "RunOnce": false,
                  "Sequence": 80,
                  "Position": 16,
                  "Span": 5,
                  "IsMandatory": false,
                  "IsIdentifier": false,
                  "DataType": "int",
                  "Level": 1,
                  "HelpNote": null,
                  "CalculationScript": null,
                  "ValidationScript": null,
                  "ControlScript": null,
                  "Domain": {
                    "DomainID": 4028,
                    "DomainName": "Sida",
                    "DomainTitle": "Sida",
                    "IsInteger": true,
                    "IsEnumerated": true
                  },
                  "Form": "{...}"
                }
              ]
            },
            "Unit": "{...}",
            "Methods": "{...}",
            "Initials": {
              "M3Pat_StillPain": 1
            },
            "IsOngoing": false,
            "ReplyStatus": 110,
            "StatusDate": "2017-05-16T08:57:52"
          },
          "success": true,
          "message": null,
          "code": 0
        }
        
### Hämta token till bjudning [GET /api/proxies/token/{ProxyID}]
+ Parameters
    + ProxyID: `151611` (string) - Unik identifierare till bjudning.
+ Response 200 (application/json)
        
        {
            "data": "jKR1iNHozrfoix1cVVemOLZuDI_LjP7y7AkPxKWRQZ8",
            "success": true,
            "message": null,
            "code": 0
        }

### Skapa [POST /api/proxies]
+ Request (application/x-www-form-urlencoded)
    + Attributes
        + SubjectKey: `19620831-5116` (string) - Personnummer (för bjudning som inte triggas av annan registrering)
        + SourceEvent (Event) - Registrering som triggat bjudning (vid automatiskt genererade bjudningar).
        + Subject (Subject) - Personnummer (för bjudningar som inte triggas av annan registrering).
        + Form (Form, required) - Formulär som skall bjudas.
        + Context (Context, required) - Kontext som skall tillskrivas patientens kommande registrering (den som är ”proxy”).
+ Response 200 (application/json)
    + Attributes
        + data (Proxy)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)

### Uppdatera [PUT /api/proxies/{ProxyID}]
+ Parameters
    + ProxyID: `123456` (number) - Identifierare för aktuell bjudning.
+ Response 200 (application/json)
    + Attributes
        + data (Proxy)
        + success: `true` (boolean)
        + message: `null` (string)
        + code: `0` (number)


# Group Sidadressering
Alla adresser i Stratum gåt att direktadressera, det vill säga en URL kan kopieras från en webbläsare till en annan och rätt innehåll kommer att visas
(under förutsättning att autentiseringen är korrekt och behörighet finns).
Sidor kan också finnas i olika sammanhang (se förklaring av [`PageScope`](#PageScope) och av entiteten [`Sida`](#reference/metadata/sida)).

Vid direktadressering kommer tillhörande Stratum-funktioner laddas in automatiskt om de inte redan är inladdade. Utöver sidinnehåll kan även tomma 
registreringsformulär och befintliga registreringar adresseras för både patientbundna och enhetsbundna registreringar. Generellt gäller 
att om efterfrågad resurs kräver auktorisering, och denna inte finns, så visas en 404-sida (”Oops!”).

## Sida [/#!page?id={aPageID}?key={aSubjectKey}]
`/#!page?id=<aPageID>?key=<aSubjectKey>`

Visar sidinnehållet som idetifieras av `aPageID` och kan peka på en sida som finns i vilket `PageScope` (se [förklaring](#reference/sidadressering) ovan) som helst. 
Om en sida finns på en annan webbplats så laddas webbplatsen först. Om sidans `PageScope` är 2 så är parametern `aSubjectKey` obligatorisk.

___Stark autentisering krävs om sidans `PageScope` är 1 eller 2.___

### Hämta[GET]
+ Parameters
    + aPageID: `1001` (number) - Sidans identifierare.
    + aSubjectKey: `19121212-1212` (optional, string) - Personnummer (subjektnyckel).
+ Response 200 (text/html)

## Subjekt [/#!subject?key={aSubjectKey}]
`/#!subject?key=<aSubjectKey>`

Visar registreringshistoriken i registrerinsapplikationen för det subjekt som identifieras av `aSubjectKey`. Vyn är densamma som om användaren 
sökt upp ett subjekt.

___Stark autentisering krävs.___

### Hämta[GET]
+ Parameters
    + aSubjectKey: `19121212-1212` (optional, string) - Personnummer (subjektnyckel).
+ Response 200 (text/html)

## Nytt huvudformulär [/#!form?id={aFormID}?key={aSubjectKey}]
`/#!form?id=<aFormID>?key=<aSubjectKey>`

Öppnar ett nytt huvudformulär som identifieras av `aFormID`, för det subjekt som identifieras av `aSubjectKey`. 
För enhetsbudna formulär utelämnas `aSubjectKey`.

___Stark autentisering krävs (för patientbundna formulär).___

### Hämta[GET]
+ Parameters
    + aFormID: `1005` (number) - Formulärets identifierare.
    + aSubjectKey: `19121212-1212` (optional, string) - Personnummer (subjektnyckel).
+ Response 200 (text/html)

## Nytt underformulär [/#!form?id={aFormID}?parent={anEventID}]
`/#!form?id=<aFormID>?parent=<anEventID>`

Öppnar ett nytt underformulär som identifieras av `aFormID`, med ägande registrering som identifieras av `anEventID`. 

___Stark autentisering krävs.___

### Hämta[GET]
+ Parameters
    + aFormID: `1082` (number) - Underformulärets identifierare.
    + anEventID: `10115713` (number) - Registreringsidentifierare till ägande registrering.
+ Response 200 (text/html)

## Registrering [/#!event?id={anEventID}]
`/#!event?id=<anEventID>`

Visar den registrering som identifieras av `anEventID` i sitt formulär, precis som om användaren klickat 
på en registrering i registreringapplikationen. Detta gäller oberoende av om `anEventID` pekar ut en subjekt- eller enhetsbunden registrering.

___Stark autentisering krävs för patientbundna registreringar.___

### Hämta[GET]
+ Parameters
    + anEventID: `10115713` (number) - Registreringsidentifierare.
+ Response 200 (text/html)

## Enhetsbundna registreringar [/#!profile]
`/#!profile`

Vid denna adressering startas registreringsapplikationen och visar registrets enhetsbundna registreringar, till exempel teknikprofil, vårdenhetspraxis och liknande.
### Hämta[GET]
+ Response 200 (text/html)


# Data Structures

## Stratums entiteter

## Wrapper (object)
+ data: `{ ... }` (string) - Returvärde från anropet.
+ success: `true` (boolean) - Om anropet lyckades.
+ message: `null` (string) - Eventuellt felmeddelande (null annars).
+ code: `0` (number) - Eventuell felkod (0 annars).

## Register (object)
+ RegisterID: `100` (number, required) - Unik identifierare.
+ RegisterName: `Testregistret` (string, required) - Namn på registret (svenska).
+ RegisterNameInEnglish: `Test register` (string) - Namn på registret (engelska).
+ ShortName: `RC` (string, required) - Registrets förkortade namn.
+ ResourceScript: `return '<p>Intressant information</p>'` (string) - Skript för att visa information överst i händelsepanelen (HTML kan returneras).
+ GenericScript: `{}` (string) - JSON-objekt för registerspecifika beräkningar och andra gemensamma funktioner (för både server och klient).
+ WidgetScript: `{}` (string) - JSON-objekt med stödfunktioner för programkomponenter (endast klient).
+ IsLookupBound: `true` (boolean, required) - Om personnummerkontroll är ett krav eller kan kringgås.
+ IsUnderDevelopment: `false` (boolean, required) - Om registret är under utveckling (döljs i vissa api-anrop).
+ Site (Site, required) - Tillhörande Site-entitet.

## Form (object)
+ FormID: `1001` (number, required) - Identifierare.
+ FormName: `TestForm` (string, required) - Giltig identifierare i strängform.
+ FormTitle: `Testformulär` (string, required) - Titel.
+ TableName: `x1005` (string, required) - Namn på tabell i databas.
+ FormScope: `1` (number, required) - Anger formulärets målgrupp och användningsområde (se [tabell](#FormScope)).
+ Sequence: `1` (number) - ordningsnummer i fall formulär visas sorterade.
+ ValidationScript: `return History.Primary.Registrations.length < 2` (string) - JavaScript-uttryck för validering av ny registrering.
+ HelpNote: ` ` (string) - övergripande hjälptext att visa i formulär (HTML).
+ Description: ` ` (string) - officiell förklarande text utifrån statistiskt perspektiv.
+ Register (Register, required) - Tillhörande register.
+ ParentForm (Form) - Ägande formulär (saknas för rotformulär).

## Question (object)
+ QuestionID: `24205` (number, required) - Identifierare.
+ ColumnName: `VisitDate` (string, required) - Namn på variabel (oftast namn på kolumn i databastabell).
+ MappedTo: `EventDate` (string) - Namn på eventuell extern entitet variabeln är länkad till ([läs mer](#MappedTo)).
+ PrefixText: `Besöksdatum` (string) - Text att visa innan variabelvärde (oftast fråga).
+ SuffixText: `år-månad-dag` (string) - Text att visa efter variabelvärde.
+ RunOnce: `false` (boolean, required) - Avgör om ett beräkningsscript endast beräknas initialt eller kontinuerligt ([läs mer](#RunOnce)).
+ CalculationScript: `return new Date()` (string) - JavaScript-uttryck för beräkning.
+ ValidationScript: `return Current.VisitDate !== null` (string) - JavaScript-uttryck för validering.
+ ControlScript: ` ` (string) - JavaScript för att styra synlighet och liknande för övriga variabler (inte validering och beräkning).
+ HelpNote: ` ` (string) - Specifik hjälptext att visa i formulär (HTML).
+ Description: ` ` (string) - officiell förklarande text utifrån statistiskt perspektiv.
+ Sequence: `1` (number) - ordningsnummer för visning i formulär (sorteringsordning).
+ Position: `8` (number) - position på aktuell rad i formulär (1-32).
+ Span: `8` (number) - utbredning  i kolumner på formulär (1-32).
+ IsMandatory: `false` (boolean) - om obligatorisk (måste anges).
+ IsIdentifier: `false` (boolean) - om variabeln används för att identifiera en registrering (kan vara flera).
+ Form (Form, required) - Formulär variabeln tillhör.
+ Domain (Domain, required) - Domän (utfallsrum) variabelns värde är bundna till.

## Domain (object)
+ DomainID: `4000` (number, required) - Identifierare.
+ DomainName: `TypeOfProject` (string) - Giltig identifierare i strängform.
+ DomainTitle: `Projektdatabasen: typ av projekt` (string) - Titel.
+ IsInteger: `true` (boolean) - Om domänens tillhörande värden begränsas till heltal.
+ Register (Register) - Tillhörande register (saknas om generisk domän).

## DomainValue (object)
+ DomainValueID: `50018` (number, required) - Identifierare.
+ ValueName: `Jag går utan svårigheter` (string, required) - Beskrivande text för värdet.
+ ValueCode: `1` (string, required) - Värdekod.
+ IsActive: `true` (boolean, required) - Om värde skall visas och få användas i nya registreringar.
+ Sequence: `13` (number, required) - Ordningstal för sortering.
+ Domain (Domain, required) - Tillhörande domän.

## Unit (object)
+ UnitID: `2000` (number, required) - Unik identifierare.
+ UnitCode: `26` (number, required) - Registrets kod för  vårdenheten.
+ UnitName: `Testkliniken` (string) - Registrets namn på vårdenheten.
+ IsActive: `true` (optional, boolean) - Om aktiv (kan döljas i listor av vårdenheter om ej aktiv).
+ HSAID: `SE2321000131-E000000002241` (string) - ID i Hälso- och Sjukvårdens Adressregister (administreras av registret).
+ PARID: `null` (string) - ID i Patientregistret (administreras av registret).
+ Register (Register, required) - Registertillhörighet.
+ Bindings (array[UnitBinding], optional) - Lista av egenskaper, till exempel landsting eller vårdnivå.

## UnitBinding (object)
+ UnitID: `2000` (required, number) - Unik identifierare.
+ DomainValueID: `54907` (required, number) - Identifierare för egenskapsvärde (domänvärde).

## User (object)
+ UserID: `90000` (number, required) - Unik identifierare.
+ Username: `roger@medicor.se` (string, required) - Unikt användarnamn (helst e-post).
+ HSAID: `SE2321000131-E000000007501` (string) - ID för kopplas autentisering (HSAID, namn eller personnummer).
+ FirstName: `Roger` (string) - Förnamn.
+ LastName: `Salomonsson` (string) - Efternamn.
+ WorkTitle: `Systemutvecklare` (string) - Tjänstetitel.
+ Organization: `Registercentrum` (string) - Namn på arbetsplats.
+ StreetAdress: `Medicinaregatan 18G` (string) - Arbetsplatsens gatuadress.
+ PostalNumber: `413 45` (string) - Arbetsplatsens postnummer.
+ PostalOffice: `Göteborg` (string) - Arbetsplatsens postort.
+ Email: `roger@medicor.se` (string) - E-postadress.
+ DefaultContextID (Context) - Kontext vid senaste inloggningen.

## Context (object)
+ ContextID: `30730` (number, required) - Unik identifierare.
+ IsActive: `true` (boolean) - Om aktiv (kan inte användas i brukarsammanhang annars).
+ Role (Role, required) - Tillhörande roll.
+ Unit (Unit, required) - Tillhörande vårdenhet.
+ User (User, required) - Tillhörande anändare.

## Role (object)
+ RoleID: `201` (number, required) - Unik identifierare.
+ RoleName: `API–brukare` (string) - Rollens namn.
+ IsPermittedToLogin: `false` (boolean) - Om inloggning är tillåten (endast läsning).
+ IsPermittedToRegister: `false` (boolean) - Om registrering i register är tillåten.
+ IsPermittedToViewHistory: `false` (boolean) - Om registreringshistorik får visas.
+ IsPermittedToAdminister: `false` (boolean) - Om administration av register är tillåten.
+ IsPermittedToCrossBorder: `false` (boolean) - Om överbryggning av vårdenhetsgränser är tillåten.

## Resource (object)
+ ResourceID: `1234` (number, required) - Unik identifierare.

## Site (object)
+ SiteID: `100` (number, required) - Unik identifierare.
+ SiteName: `Registercentrum Västra Götaland` (string, required) - Titel på webbplatsen.
+ ThemeSettings: `{}` (string, required) - JSON-objekt med temainställningar.
+ LanguageID: `sv` (string, required) - Språkkod (ISO 639).
+ CountryID: `SE` (string, required) - Landskod (ISO 3166).

## Page (object)
+ PageID: `1001` (number, required) - Unik identifierare.
+ PageTitle: `Om Stratum` (string) - Titel i navigation.
+ PageContent: `Detta är portalsidan för <a href="http://www.registercentrum.se">Registercentrum Västra Götalands</a> tekniska plattform Stratum.` (string) - Sidinnehåll i HTML. Kan även innehålla [programkomponent(er)](#reference/metadata/komponenter) och JavaScript i största allmänhet.
+ PageLevel: `0` (number) - För att skapa hierarkier av sidor. Allt på samma `PageLevel` är grupperat under föregående sida med närmast lägre `PageLevel` när sidorna sorteras med avseende på `PageOrder`. Typiskt värde är `0`.
+ PageOrder: `1` (number) - Sidans ordningsnummer (alla bör vara unika för att inte skapa oklarheter kring ordning).
+ PageScope: `0` (number) - Sammanhang där sidan skall visas (se [förklaring](#PageScope)).
+ ModifiedAt: `2017-07-05 13:39:00` (string) - Tidsstämpel för senaste uppdatering (endast läsning).
+ Site (Site, required) - Tillhörande webbplats

## Subject (object)
+ SubjectID: `1001` (number, required) - Unik identifierare.
+ SubjectKey: `19620831-5116` (string, required) - Personnummer eller annan identifierare för mätobjekt.
+ IsVerified: `true` (boolean) - Om personnummer är verifierad genom slagning mot folkbokföringstjänst ([Navet](https://www.skatteverket.se/foretagochorganisationer/myndigheter/informationsutbytemellanmyndigheter/navethamtauppgifteromfolkbokforing.4.18e1b10334ebe8bc80001754.html#Detaljeradinformationomtjansterna)).
+ StatusCode: `AV` (string) - Status i Navet (AV = Avliden, UV = Utvandrad, null = Uppgift saknas).
+ StatusDate: `2027-08-31` (string) - Datum för status (oftast död). Kan vara delar av datum, till exempel ”2001-01” eller bara ”2001”. Attributet ”DateCorrectnes” anger detta attributs innehåll.
+ DateOfDeath: `2027-08-31` (string, fixed) - Dödsdatum (det vill säga ”StatusDate” då ”StatusCode” = ”AV”).
+ DateCorrectness: `0` (number) - Avgör ”kompletthet” hos attributet ”StatusDate” (se [förklaring](#DateCorrectness)).
+ Register (Register, required) - Tillhörande register.

## LogEntry (object)
+ LogEntryID: `100037` (number, required) - Unik identifierare.
+ PerformedAt: `2017-08-09 11:14:43` (string) - Tidstämpel när loggraden skapades.
+ ActionTarget: `GET /api/metadata/units/register/104` (string) - Beskrivning av loggad händelse (innehåll beroende av loggtyp).
+ EventID: `10115713` (number) - Vilken registrering loggraden avser (om registreringsrelaterad, saknas annars).
+ LogTypeID: `1031` (number, required) - Typ av loggrad (se [förklaring](#LogType)).
+ Context (Context, required) - Kontext som orsakat loggningen

## Event (object)
+ EventID: `12345` (number, required) - Unik identifierare.
+ EventDate: `2027-08-31` (string) - Datum då händelsen inträffade i vårdprocessen.
+ InsertedAt: `2017-08-09 11:14:43` (string) - Tidstämpel när registreringen skapades.
+ ModifiedAt: `2017-08-09 11:14:43` (string) - Tidstämpel när registreringen senast uppdaterades.
+ IsClosed: `false` (boolean, required) - Om registreringen är klarmarkerad (tillval).
+ Context (Context, required) - Kontext som senast sparat registreringen.
+ Form (Form, required) - Formulär registreringen tillhör.
+ Subject (Subject, required) - Subjekt (patient) registreringen är bunden till.
+ ParentEvent (Event) - Eventuell överliggande registrering (för hierarkiska registrerinfskedjor).
  
## Proxy (object)
+ ProxyID: `123456` (number, required) - Unik identifierare.
+ SubjectKey: `19620831-5116` (string) - Personnummer (för bjudning som inte triggas av annan registrering)
+ ReplyStatus: `100` (number, required) - Aktuell status (se [förklaring](#ReplyStatus)).
+ StatusDate: `2017-08-09 11:14:43` (string, required) - Tidsstämpel då status senast ändrades.
+ SourceEvent (Event) - Registrering som triggat bjudning (vid automatiskt genererade bjudningar).
+ Subject (Subject) - Personnummer (för bjudningar som inte triggas av annan registrering).
+ Form (Form, required) - Formulär som skall bjudas.
+ Context (Context, required) - Kontext som skall tillskrivas patientens kommande registrering (den som är ”proxy”).

## Externa entiteter

## OrderResponse (object)
+ orderRef: `4f748f5b-fb02-4529-b242-ddf651f954c9` (string) - Referens till autentiserinsgorder.
+ autoStartToken: `f5e25e9a-0fc6-4209-81e2-4b38eb5fa175` (string) - För autentisering inom en och samma mobila enhet (reserverad).

## CollectResponse (enum[string])
    + Members 
        + `OUTSTANDING_TRANSACTION`
        + `NO_CLIENT`
        + `STARTED`
        + `USER_SIGN`
        + `COMPLETE`
        + `USER_CANCEL`
        + `EXPIRED_TRANSACTION`